{"version":3,"sources":["../src/isBase.ts","../src/isEthereum.ts","../src/OnchainKitConfig.ts","../src/OnchainKitProvider.tsx","../src/internal/utils/checkHashLength.ts","../src/useOnchainKit.tsx","../src/version.ts"],"sourcesContent":["import { base, baseSepolia } from 'viem/chains';\nimport type { isBaseOptions } from './types';\n\n/**\n * isBase\n *  - Checks if the paymaster operations chain id is valid\n *  - Only allows the Base and Base Sepolia chain ids\n */\nexport function isBase({\n  chainId,\n  isMainnetOnly = false,\n}: isBaseOptions): boolean {\n  // If only Base mainnet\n  if (isMainnetOnly && chainId === base.id) {\n    return true;\n  }\n  // If only Base or Base Sepolia\n  if (!isMainnetOnly && (chainId === baseSepolia.id || chainId === base.id)) {\n    return true;\n  }\n  return false;\n}\n","import { mainnet, sepolia } from 'viem/chains';\nimport type { isEthereumOptions } from './types';\n\n/**\n * isEthereum\n *  - Checks if the chain is mainnet or sepolia\n */\nexport function isEthereum({\n  chainId,\n  isMainnetOnly = false,\n}: isEthereumOptions): boolean {\n  // If only ETH mainnet\n  if (isMainnetOnly && chainId === mainnet.id) {\n    return true;\n  }\n  // If only ETH or ETH Sepolia\n  if (!isMainnetOnly && (chainId === sepolia.id || chainId === mainnet.id)) {\n    return true;\n  }\n  return false;\n}\n","import { baseSepolia } from 'viem/chains';\nimport type { OnchainKitConfig, SetOnchainKitConfig } from './types';\n\n// The ONCHAIN_KIT_CONFIG is not exported at index.ts,\n// but only acccessed through the get and set functions.\nexport const ONCHAIN_KIT_CONFIG: OnchainKitConfig = {\n  address: null,\n  apiKey: null,\n  chain: baseSepolia,\n  config: {\n    appearance: {\n      name: null,\n      logo: null,\n      mode: null,\n      theme: null,\n    },\n    paymaster: null,\n  },\n  rpcUrl: null,\n  schemaId: null,\n  projectId: null,\n};\n\n/**\n * Access the ONCHAIN_KIT_CONFIG object directly by providing the key.\n * This is powerful when you use OnchainKit utilities outside of the React context.\n */\nexport const getOnchainKitConfig = <K extends keyof typeof ONCHAIN_KIT_CONFIG>(\n  configName: K,\n): (typeof ONCHAIN_KIT_CONFIG)[K] => {\n  return ONCHAIN_KIT_CONFIG[configName];\n};\n\n/**\n * Update the ONCHAIN_KIT_CONFIG object directly by providing the properties to update.\n * This is powerful when you use OnchainKit utilities outside of the React context.\n */\nexport const setOnchainKitConfig = (properties: SetOnchainKitConfig) => {\n  Object.assign(ONCHAIN_KIT_CONFIG, properties);\n  return getOnchainKitConfig;\n};\n","import { createContext, useMemo } from 'react';\nimport { ONCHAIN_KIT_CONFIG, setOnchainKitConfig } from './OnchainKitConfig';\nimport { checkHashLength } from './internal/utils/checkHashLength';\nimport type { OnchainKitContextType, OnchainKitProviderReact } from './types';\n\nexport const OnchainKitContext =\n  createContext<OnchainKitContextType>(ONCHAIN_KIT_CONFIG);\n\n/**\n * Provides the OnchainKit React Context to the app.\n */\nexport function OnchainKitProvider({\n  address,\n  apiKey,\n  chain,\n  children,\n  config,\n  projectId,\n  rpcUrl,\n  schemaId,\n}: OnchainKitProviderReact) {\n  if (schemaId && !checkHashLength(schemaId, 64)) {\n    throw Error('EAS schemaId must be 64 characters prefixed with \"0x\"');\n  }\n\n  const value = useMemo(() => {\n    const defaultPaymasterUrl = apiKey\n      ? `https://api.developer.coinbase.com/rpc/v1/${chain.name\n          .replace(' ', '-')\n          .toLowerCase()}/${apiKey}`\n      : null;\n    const onchainKitConfig = {\n      address: address ?? null,\n      apiKey: apiKey ?? null,\n      chain: chain,\n      config: {\n        appearance: {\n          name: config?.appearance?.name,\n          logo: config?.appearance?.logo,\n          mode: config?.appearance?.mode ?? 'auto',\n          theme: config?.appearance?.theme ?? 'default',\n        },\n        paymaster: config?.paymaster || defaultPaymasterUrl,\n      },\n      projectId: projectId ?? null,\n      rpcUrl: rpcUrl ?? null,\n      schemaId: schemaId ?? null,\n    };\n    setOnchainKitConfig(onchainKitConfig);\n    return onchainKitConfig;\n  }, [address, apiKey, chain, config, projectId, rpcUrl, schemaId]);\n\n  return (\n    <OnchainKitContext.Provider value={value}>\n      {children}\n    </OnchainKitContext.Provider>\n  );\n}\n","/**\n * Checks if a given hash has a given length.\n * The hash must start with '0x' followed by hexadecimal characters (a-f, A-F, 0-9).\n */\nexport function checkHashLength(\n  hash: string, // hash to be checked\n  length: number, // length of hash\n): hash is `0x${string}` {\n  return new RegExp(`^0x[a-fA-F0-9]{${length}}$`).test(hash);\n}\n","import { useContext } from 'react';\nimport { OnchainKitContext } from './OnchainKitProvider';\n\nexport function useOnchainKit() {\n  return useContext(OnchainKitContext);\n}\n","export const version = '0.35.2';\n"],"mappings":";;;;AAAA,SAASA,MAAMC,mBAAmB;AAQ3B,SAASC,OAAO,EACrBC,SACAC,gBAAgB,MAAK,GACP;AAEd,MAAIA,iBAAiBD,YAAYE,KAAKC,IAAI;AACxC,WAAO;EACT;AAEA,MAAI,CAACF,kBAAkBD,YAAYI,YAAYD,MAAMH,YAAYE,KAAKC,KAAK;AACzE,WAAO;EACT;AACA,SAAO;AACT;AAbgBJ;;;ACRhB,SAASM,SAASC,eAAe;AAO1B,SAASC,WAAW,EACzBC,SACAC,gBAAgB,MAAK,GACH;AAElB,MAAIA,iBAAiBD,YAAYE,QAAQC,IAAI;AAC3C,WAAO;EACT;AAEA,MAAI,CAACF,kBAAkBD,YAAYI,QAAQD,MAAMH,YAAYE,QAAQC,KAAK;AACxE,WAAO;EACT;AACA,SAAO;AACT;AAbgBJ;;;ACPhB,SAASM,eAAAA,oBAAmB;AAKrB,IAAMC,qBAAuC;EAClDC,SAAS;EACTC,QAAQ;EACRC,OAAOC;EACPC,QAAQ;IACNC,YAAY;MACVC,MAAM;MACNC,MAAM;MACNC,MAAM;MACNC,OAAO;IACT;IACAC,WAAW;EACb;EACAC,QAAQ;EACRC,UAAU;EACVC,WAAW;AACb;AAMO,IAAMC,sBAAsB,wBACjCC,eAAAA;AAEA,SAAOhB,mBAAmBgB,UAAAA;AAC5B,GAJmC;AAU5B,IAAMC,sBAAsB,wBAACC,eAAAA;AAClCC,SAAOC,OAAOpB,oBAAoBkB,UAAAA;AAClC,SAAOH;AACT,GAHmC;;;ACrCnC,SAASM,eAAeC,eAAe;;;ACIhC,SAASC,gBACdC,MACAC,QAAc;AAEd,SAAO,IAAIC,OAAO,kBAAkBD,MAAAA,IAAU,EAAEE,KAAKH,IAAAA;AACvD;AALgBD;;;ADCT,IAAMK,oBACXC,8BAAqCC,kBAAAA;AAKhC,SAASC,mBAAmB,EACjCC,SACAC,QACAC,OACAC,UACAC,QACAC,WACAC,QACAC,SAAQ,GACgB;AACxB,MAAIA,YAAY,CAACC,gBAAgBD,UAAU,EAAA,GAAK;AAC9C,UAAME,MAAM,uDAAA;EACd;AAEA,QAAMC,QAAQC,QAAQ,MAAA;AACpB,UAAMC,sBAAsBX,SACxB,6CAA6CC,MAAMW,KAChDC,QAAQ,KAAK,GAAA,EACbC,YAAW,CAAA,IAAMd,MAAAA,KACpB;AACJ,UAAMe,mBAAmB;MACvBhB,SAASA,WAAW;MACpBC,QAAQA,UAAU;MAClBC;MACAE,QAAQ;QACNa,YAAY;UACVJ,MAAMT,QAAQa,YAAYJ;UAC1BK,MAAMd,QAAQa,YAAYC;UAC1BC,MAAMf,QAAQa,YAAYE,QAAQ;UAClCC,OAAOhB,QAAQa,YAAYG,SAAS;QACtC;QACAC,WAAWjB,QAAQiB,aAAaT;MAClC;MACAP,WAAWA,aAAa;MACxBC,QAAQA,UAAU;MAClBC,UAAUA,YAAY;IACxB;AACAe,wBAAoBN,gBAAAA;AACpB,WAAOA;EACT,GAAG;IAAChB;IAASC;IAAQC;IAAOE;IAAQC;IAAWC;IAAQC;GAAS;AAEhE,SACE,sBAAA,cAACX,kBAAkB2B,UAAQ;IAACb;KACzBP,QAAAA;AAGP;AA9CgBJ;;;AEXhB,SAASyB,kBAAkB;AAGpB,SAASC,gBAAAA;AACd,SAAOC,WAAWC,iBAAAA;AACpB;AAFgBF;;;ACHT,IAAMG,UAAU;","names":["base","baseSepolia","isBase","chainId","isMainnetOnly","base","id","baseSepolia","mainnet","sepolia","isEthereum","chainId","isMainnetOnly","mainnet","id","sepolia","baseSepolia","ONCHAIN_KIT_CONFIG","address","apiKey","chain","baseSepolia","config","appearance","name","logo","mode","theme","paymaster","rpcUrl","schemaId","projectId","getOnchainKitConfig","configName","setOnchainKitConfig","properties","Object","assign","createContext","useMemo","checkHashLength","hash","length","RegExp","test","OnchainKitContext","createContext","ONCHAIN_KIT_CONFIG","OnchainKitProvider","address","apiKey","chain","children","config","projectId","rpcUrl","schemaId","checkHashLength","Error","value","useMemo","defaultPaymasterUrl","name","replace","toLowerCase","onchainKitConfig","appearance","logo","mode","theme","paymaster","setOnchainKitConfig","Provider","useContext","useOnchainKit","useContext","OnchainKitContext","version"]}