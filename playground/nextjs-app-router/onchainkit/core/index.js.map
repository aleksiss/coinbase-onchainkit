{"version":3,"sources":["../../src/frame/utils/setFrameHtmlButtons.ts","../../src/frame/utils/getFrameHtmlResponse.ts","../../src/frame/utils/setFrameMetadataButtons.ts","../../src/frame/utils/getFrameMetadata.ts","../../src/network/neynar/convertToNeynarResponseModel.ts","../../src/version.ts","../../src/network/neynar/FetchError.ts","../../src/network/neynar/postDataToNeynar.ts","../../src/network/neynar/neynarFrameValidation.ts","../../src/frame/utils/getFrameMessage.ts","../../src/frame/utils/getMockFrameRequest.ts"],"sourcesContent":["import type { FrameMetadataType } from '../types';\n\nexport function setFrameHtmlButtons(buttons: FrameMetadataType['buttons']) {\n  if (!buttons) {\n    return '';\n  }\n\n  return buttons\n    .map((button, index) => {\n      let buttonHtml = `  <meta property=\"fc:frame:button:${\n        index + 1\n      }\" content=\"${button.label}\" />\\n`;\n      if (button.action) {\n        buttonHtml += `  <meta property=\"fc:frame:button:${\n          index + 1\n        }:action\" content=\"${button.action}\" />\\n`;\n      }\n      if (button.target) {\n        buttonHtml += `  <meta property=\"fc:frame:button:${\n          index + 1\n        }:target\" content=\"${button.target}\" />\\n`;\n      }\n      if (\n        button.action &&\n        (button.action === 'tx' || button.action === 'post') &&\n        button.postUrl\n      ) {\n        buttonHtml += `  <meta property=\"fc:frame:button:${\n          index + 1\n        }:post_url\" content=\"${button.postUrl}\" />\\n`;\n      }\n      return buttonHtml;\n    })\n    .join('');\n}\n","import type { FrameMetadataType } from '../types';\nimport { setFrameHtmlButtons } from './setFrameHtmlButtons';\n\ntype FrameMetadataHtmlResponse = FrameMetadataType & {\n  ogDescription?: string;\n  ogTitle?: string;\n};\n\n/**\n * Returns an HTML string containing metadata for a new valid frame.\n */\n// biome-ignore lint/complexity/noExcessiveCognitiveComplexity: TODO Refactor this component\nfunction getFrameHtmlResponse({\n  accepts = {},\n  buttons,\n  image,\n  input,\n  isOpenFrame = false,\n  ogDescription,\n  ogTitle,\n  postUrl,\n  post_url,\n  refreshPeriod,\n  refresh_period,\n  state,\n}: FrameMetadataHtmlResponse): string {\n  const imgSrc = typeof image === 'string' ? image : image.src;\n  const ogImageHtml = `  <meta property=\"og:image\" content=\"${imgSrc}\" />\\n`;\n  let imageHtml = `  <meta property=\"fc:frame:image\" content=\"${imgSrc}\" />\\n`;\n  if (typeof image !== 'string' && image.aspectRatio) {\n    imageHtml += `  <meta property=\"fc:frame:image:aspect_ratio\" content=\"${image.aspectRatio}\" />\\n`;\n  }\n\n  // Set the input metadata if it exists.\n  const inputHtml = input\n    ? `  <meta property=\"fc:frame:input:text\" content=\"${input.text}\" />\\n`\n    : '';\n\n  // Set the state metadata if it exists.\n  const stateHtml = state\n    ? `  <meta property=\"fc:frame:state\" content=\"${encodeURIComponent(JSON.stringify(state))}\" />\\n`\n    : '';\n\n  // Set the button metadata if it exists.\n  let buttonsHtml = '';\n  if (buttons) {\n    buttonsHtml = setFrameHtmlButtons(buttons);\n  }\n\n  // Set the post_url metadata if it exists.\n  const postUrlToUse = postUrl || post_url;\n  const postUrlHtml = postUrlToUse\n    ? `  <meta property=\"fc:frame:post_url\" content=\"${postUrlToUse}\" />\\n`\n    : '';\n\n  // Set the refresh_period metadata if it exists.\n  const refreshPeriodToUse = refreshPeriod || refresh_period;\n  const refreshPeriodHtml = refreshPeriodToUse\n    ? `  <meta property=\"fc:frame:refresh_period\" content=\"${refreshPeriodToUse.toString()}\" />\\n`\n    : '';\n\n  let ofHtml = '';\n  // Set the Open Frames metadata\n  if (isOpenFrame) {\n    ofHtml = `  <meta property=\"of:version\" content=\"vNext\" />\\n`;\n    const ofAcceptsHtml = Object.keys(accepts)\n      .map((protocolIdentifier) => {\n        return `  <meta property=\"of:accepts:${protocolIdentifier}\" content=\"${accepts[protocolIdentifier]}\" />\\n`;\n      })\n      .join('');\n    const ofImageHtml = `  <meta property=\"of:image\" content=\"${imgSrc}\" />\\n`;\n    ofHtml += ofAcceptsHtml + ofImageHtml;\n  }\n\n  // Return the HTML string containing all the metadata.\n  const html = `<!DOCTYPE html>\n<html>\n<head>\n  <meta property=\"og:description\" content=\"${ogDescription || 'Frame description'}\" />\n  <meta property=\"og:title\" content=\"${ogTitle || 'Frame title'}\" />\n  <meta property=\"fc:frame\" content=\"vNext\" />\n${buttonsHtml}${ogImageHtml}${imageHtml}${inputHtml}${postUrlHtml}${refreshPeriodHtml}${stateHtml}${ofHtml}\n</head>\n</html>`;\n\n  return html;\n}\n\nexport { getFrameHtmlResponse };\n","import type { FrameMetadataType } from '../types';\n\nexport function setFrameMetadataButtons(\n  metadata: Record<string, string>,\n  buttons: FrameMetadataType['buttons'],\n) {\n  if (!buttons) {\n    return;\n  }\n\n  buttons.forEach((button, index) => {\n    metadata[`fc:frame:button:${index + 1}`] = button.label;\n    if (button.action) {\n      metadata[`fc:frame:button:${index + 1}:action`] = button.action;\n    }\n    if (button.target) {\n      metadata[`fc:frame:button:${index + 1}:target`] = button.target;\n    }\n    if (\n      button.action &&\n      (button.action === 'tx' || button.action === 'post') &&\n      button.postUrl\n    ) {\n      metadata[`fc:frame:button:${index + 1}:post_url`] = button.postUrl;\n    }\n  });\n}\n","import type { FrameMetadataResponse, FrameMetadataType } from '../types';\nimport { setFrameMetadataButtons } from './setFrameMetadataButtons';\n\n/**\n * This function generates the metadata for a Farcaster Frame.\n */\nexport const getFrameMetadata = ({\n  accepts = {},\n  buttons,\n  image,\n  input,\n  isOpenFrame = false,\n  postUrl,\n  post_url,\n  refreshPeriod,\n  refresh_period,\n  state,\n  // biome-ignore lint/complexity/noExcessiveCognitiveComplexity: TODO Refactor this component\n}: FrameMetadataType): FrameMetadataResponse => {\n  const postUrlToUse = postUrl || post_url;\n  const refreshPeriodToUse = refreshPeriod || refresh_period;\n\n  const metadata: Record<string, string> = {\n    'fc:frame': 'vNext',\n  };\n  let imageSrc = '';\n  if (typeof image === 'string') {\n    imageSrc = image;\n  } else {\n    imageSrc = image.src;\n    if (image.aspectRatio) {\n      metadata['fc:frame:image:aspect_ratio'] = image.aspectRatio;\n    }\n  }\n  metadata['fc:frame:image'] = imageSrc;\n  if (input) {\n    metadata['fc:frame:input:text'] = input.text;\n  }\n  if (buttons) {\n    setFrameMetadataButtons(metadata, buttons);\n  }\n  if (postUrlToUse) {\n    metadata['fc:frame:post_url'] = postUrlToUse;\n  }\n  if (refreshPeriodToUse) {\n    metadata['fc:frame:refresh_period'] = refreshPeriodToUse.toString();\n  }\n  if (state) {\n    metadata['fc:frame:state'] = encodeURIComponent(JSON.stringify(state));\n  }\n  if (isOpenFrame) {\n    metadata['of:version'] = 'vNext';\n    if (accepts) {\n      /* biome-ignore lint: code needs to be refactored */\n      Object.keys(accepts).forEach((protocolIdentifier) => {\n        metadata[`of:accepts:${protocolIdentifier}`] =\n          accepts[protocolIdentifier];\n      });\n    }\n    metadata['of:image'] = imageSrc;\n  }\n  return metadata;\n};\n","import type { FrameValidationData } from '../../frame/types';\nimport type { NeynarFrameValidationInternalModel } from './types';\n\nexport function convertToNeynarResponseModel(\n  /* biome-ignore lint: code needs to be deprecated */\n  data: any,\n): FrameValidationData | undefined {\n  if (!data) {\n    return;\n  }\n\n  /**\n   * Note: This is not a type-safe conversion, however, balancing that risk with an additional import\n   * to include a library like AJV which can accomplish that.  Alternatively, we could write conversions\n   * for each type, but that seemed overkill.\n   */\n  const neynarResponse = data as NeynarFrameValidationInternalModel;\n\n  // Shorten paths\n  const action = neynarResponse.action;\n  const cast = action?.cast;\n  const interactor = action?.interactor;\n\n  return {\n    address: action?.address || null,\n    button: action?.tapped_button?.index,\n    following: action?.interactor?.viewer_context?.following,\n    input: action?.input?.text,\n    interactor: {\n      fid: interactor?.fid,\n      custody_address: interactor?.custody_address,\n      verified_accounts: interactor?.verifications,\n      verified_addresses: {\n        eth_addresses: interactor?.verified_addresses?.eth_addresses,\n        sol_addresses: interactor?.verified_addresses?.sol_addresses,\n      },\n    },\n    liked: cast?.viewer_context?.liked,\n    raw: neynarResponse,\n    recasted: cast?.viewer_context?.recasted,\n    state: {\n      serialized: action?.state?.serialized || '',\n    },\n    transaction: action?.transaction || null,\n    valid: neynarResponse.valid,\n  };\n}\n","export const version = '0.35.2';\n","export class FetchError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'FetchError';\n  }\n}\n","import { version } from '../../version';\nimport { FetchError } from './FetchError';\n\n/* biome-ignore lint: code needs to be deprecated */\nexport async function postDataToNeynar(url: string, apiKey: string, data: any) {\n  const options = {\n    method: 'POST',\n    url: url,\n    headers: {\n      accept: 'application/json',\n      api_key: apiKey,\n      'content-type': 'application/json',\n      onchainkit_version: version,\n    },\n    body: JSON.stringify(data),\n  };\n  const resp = await fetch(options.url, options);\n  if (resp.status !== 200) {\n    throw new FetchError(\n      `non-200 status returned from neynar : ${resp.status}`,\n    );\n  }\n  return await resp.json();\n}\n","import type { FrameValidationData } from '../../frame/types';\nimport { convertToNeynarResponseModel } from './convertToNeynarResponseModel';\nimport { postDataToNeynar } from './postDataToNeynar';\n\nexport const NEYNAR_DEFAULT_API_KEY = 'NEYNAR_ONCHAIN_KIT';\n\nexport async function neynarFrameValidation(\n  messageBytes: string,\n  apiKey: string = NEYNAR_DEFAULT_API_KEY,\n  castReactionContext = true,\n  followContext = true,\n): Promise<FrameValidationData | undefined> {\n  const url = 'https://api.neynar.com/v2/farcaster/frame/validate';\n\n  const responseBody = await postDataToNeynar(url, apiKey, {\n    message_bytes_in_hex: messageBytes,\n    cast_reaction_context: castReactionContext, // Returns if the user has liked/recasted\n    follow_context: followContext, // Returns if the user is Following\n  });\n  return convertToNeynarResponseModel(responseBody);\n}\n","import {\n  NEYNAR_DEFAULT_API_KEY,\n  neynarFrameValidation,\n} from '../../network/neynar/neynarFrameValidation';\nimport type {\n  FrameRequest,\n  FrameValidationResponse,\n  MockFrameRequest,\n} from '../types';\n\ntype FrameMessageOptions =\n  | {\n      neynarApiKey?: string;\n      castReactionContext?: boolean;\n      followContext?: boolean;\n      allowFramegear?: boolean;\n    }\n  | undefined;\n\n/**\n * Given a frame message, decode and validate it.\n * If message is valid, return the message. Otherwise undefined.\n */\nasync function getFrameMessage(\n  body: FrameRequest | MockFrameRequest,\n  messageOptions?: FrameMessageOptions,\n): Promise<FrameValidationResponse> {\n  // Skip validation only when allowed and when receiving a request from framegear\n  if (messageOptions?.allowFramegear) {\n    if ((body as MockFrameRequest).mockFrameData) {\n      return {\n        isValid: true,\n        message: (body as MockFrameRequest).mockFrameData,\n      };\n    }\n  }\n\n  // Validate the message\n  const response = await neynarFrameValidation(\n    body?.trustedData?.messageBytes,\n    messageOptions?.neynarApiKey || NEYNAR_DEFAULT_API_KEY,\n    messageOptions?.castReactionContext || true,\n    messageOptions?.followContext || true,\n  );\n  if (response?.valid) {\n    return {\n      isValid: true,\n      message: response,\n    };\n  }\n  // Security best practice, don't return anything if we can't validate the frame.\n  return {\n    isValid: false,\n    message: undefined,\n  };\n}\n\nexport { getFrameMessage };\n","import type {\n  FrameRequest,\n  MockFrameRequest,\n  MockFrameRequestOptions,\n} from '../types';\n\n/**\n * Modify a standard frame request to include simulated values (e.g., indicate the viewer\n * follows the cast author) for development/debugging purposes.\n * @param request A standard frame request.\n * @param options An object containing values we will pretend are real for the purposes of debugging.\n * @returns\n */\nfunction getMockFrameRequest(\n  request: FrameRequest,\n  options?: MockFrameRequestOptions,\n): MockFrameRequest {\n  return {\n    ...request,\n    mockFrameData: {\n      address: null,\n      button: request.untrustedData.buttonIndex,\n      following: !!options?.following,\n      input: request.untrustedData.inputText,\n      interactor: {\n        fid: options?.interactor?.fid || 0,\n        custody_address:\n          options?.interactor?.custody_address || '0xnotarealaddress',\n        verified_accounts: options?.interactor?.verified_accounts || [],\n        verified_addresses: {\n          eth_addresses: null,\n          sol_addresses: null,\n        },\n      },\n      liked: !!options?.liked,\n      recasted: !!options?.recasted,\n      state: {\n        serialized: request.untrustedData.state || '',\n      },\n      transaction: null,\n      valid: true,\n      raw: {\n        valid: true,\n        /* biome-ignore lint: code needs to be refactored */\n        action: {} as any,\n      },\n    },\n  };\n}\n\nexport { getMockFrameRequest };\n"],"mappings":"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","names":["setFrameHtmlButtons","buttons","map","button","index","buttonHtml","label","action","target","postUrl","join","getFrameHtmlResponse","accepts","buttons","image","input","isOpenFrame","ogDescription","ogTitle","postUrl","post_url","refreshPeriod","refresh_period","state","imgSrc","src","ogImageHtml","imageHtml","aspectRatio","inputHtml","text","stateHtml","encodeURIComponent","JSON","stringify","buttonsHtml","setFrameHtmlButtons","postUrlToUse","postUrlHtml","refreshPeriodToUse","refreshPeriodHtml","toString","ofHtml","ofAcceptsHtml","Object","keys","map","protocolIdentifier","join","ofImageHtml","html","setFrameMetadataButtons","metadata","buttons","forEach","button","index","label","action","target","postUrl","getFrameMetadata","accepts","buttons","image","input","isOpenFrame","postUrl","post_url","refreshPeriod","refresh_period","state","postUrlToUse","refreshPeriodToUse","metadata","imageSrc","src","aspectRatio","text","setFrameMetadataButtons","toString","encodeURIComponent","JSON","stringify","Object","keys","forEach","protocolIdentifier","convertToNeynarResponseModel","data","neynarResponse","action","cast","interactor","address","button","tapped_button","index","following","viewer_context","input","text","fid","custody_address","verified_accounts","verifications","verified_addresses","eth_addresses","sol_addresses","liked","raw","recasted","state","serialized","transaction","valid","version","FetchError","Error","constructor","message","name","postDataToNeynar","url","apiKey","data","options","method","headers","accept","api_key","onchainkit_version","version","body","JSON","stringify","resp","fetch","status","FetchError","json","NEYNAR_DEFAULT_API_KEY","neynarFrameValidation","messageBytes","apiKey","castReactionContext","followContext","url","responseBody","postDataToNeynar","message_bytes_in_hex","cast_reaction_context","follow_context","convertToNeynarResponseModel","getFrameMessage","body","messageOptions","allowFramegear","mockFrameData","isValid","message","response","neynarFrameValidation","trustedData","messageBytes","neynarApiKey","NEYNAR_DEFAULT_API_KEY","castReactionContext","followContext","valid","undefined","getMockFrameRequest","request","options","mockFrameData","address","button","untrustedData","buttonIndex","following","input","inputText","interactor","fid","custody_address","verified_accounts","verified_addresses","eth_addresses","sol_addresses","liked","recasted","state","serialized","transaction","valid","raw","action"]}