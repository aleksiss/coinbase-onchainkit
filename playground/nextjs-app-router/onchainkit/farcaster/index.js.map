{"version":3,"sources":["../../src/version.ts","../../src/network/neynar/FetchError.ts","../../src/network/neynar/neynarFrameValidation.ts","../../src/network/neynar/getDataFromNeynar.ts","../../src/network/neynar/getCustodyAddressForFidNeynar.ts","../../src/network/neynar/getVerifiedAddressesForFidNeynar.ts","../../src/farcaster/getFarcasterUserAddress.ts"],"sourcesContent":["export const version = '0.35.2';\n","export class FetchError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'FetchError';\n  }\n}\n","import type { FrameValidationData } from '../../frame/types';\nimport { convertToNeynarResponseModel } from './convertToNeynarResponseModel';\nimport { postDataToNeynar } from './postDataToNeynar';\n\nexport const NEYNAR_DEFAULT_API_KEY = 'NEYNAR_ONCHAIN_KIT';\n\nexport async function neynarFrameValidation(\n  messageBytes: string,\n  apiKey: string = NEYNAR_DEFAULT_API_KEY,\n  castReactionContext = true,\n  followContext = true,\n): Promise<FrameValidationData | undefined> {\n  const url = 'https://api.neynar.com/v2/farcaster/frame/validate';\n\n  const responseBody = await postDataToNeynar(url, apiKey, {\n    message_bytes_in_hex: messageBytes,\n    cast_reaction_context: castReactionContext, // Returns if the user has liked/recasted\n    follow_context: followContext, // Returns if the user is Following\n  });\n  return convertToNeynarResponseModel(responseBody);\n}\n","import { version } from '../../version';\nimport { FetchError } from './FetchError';\nimport { NEYNAR_DEFAULT_API_KEY } from './neynarFrameValidation';\n\nexport async function getDataFromNeynar(\n  url: string,\n  apiKey: string = NEYNAR_DEFAULT_API_KEY,\n) {\n  const options = {\n    method: 'GET',\n    url: url,\n    headers: {\n      accept: 'application/json',\n      api_key: apiKey,\n      'content-type': 'application/json',\n      onchainkit_version: version,\n    },\n  };\n  const resp = await fetch(options.url, options);\n  if (resp.status !== 200) {\n    throw new FetchError(\n      `non-200 status returned from neynar : ${resp.status}`,\n    );\n  }\n  return await resp.json();\n}\n","import { getDataFromNeynar } from './getDataFromNeynar';\nimport { NEYNAR_DEFAULT_API_KEY } from './neynarFrameValidation';\n\nexport async function getCustodyAddressForFidNeynar(\n  fid: number,\n  apiKey: string = NEYNAR_DEFAULT_API_KEY,\n): Promise<string> {\n  const url = `https://api.neynar.com/v2/farcaster/user/bulk?fids=${fid}`;\n  const responseBody = await getDataFromNeynar(url, apiKey);\n  if (!responseBody?.users?.[0]?.custody_address) {\n    throw new Error(`No custody address found for FID ${fid}`);\n  }\n  return responseBody.users[0].custody_address;\n}\n","import { getDataFromNeynar } from './getDataFromNeynar';\nimport { NEYNAR_DEFAULT_API_KEY } from './neynarFrameValidation';\n\nexport async function getVerifiedAddressesForFidNeynar(\n  fid: number,\n  apiKey: string = NEYNAR_DEFAULT_API_KEY,\n): Promise<string[]> {\n  const url = `https://api.neynar.com/v2/farcaster/user/bulk?fids=${fid}`;\n  const responseBody = await getDataFromNeynar(url, apiKey);\n  if (!responseBody?.users?.[0]?.verifications?.length) {\n    throw new Error(`No verified addresses found for FID ${fid}`);\n  }\n  return responseBody.users[0].verifications;\n}\n","import { getCustodyAddressForFidNeynar } from '../network/neynar/getCustodyAddressForFidNeynar';\nimport { getVerifiedAddressesForFidNeynar } from '../network/neynar/getVerifiedAddressesForFidNeynar';\nimport type { GetFarcasterUserAddressResponse } from './types';\n\ntype GetFarcasterUserAddressOptions =\n  | {\n      neynarApiKey?: string; // default to onchain-kit's default key\n      hasCustodyAddress?: boolean; // default to true\n      hasVerifiedAddresses?: boolean; // default to true\n    }\n  | undefined;\n\n/**\n * Get the user address for a given fid\n */\nasync function getFarcasterUserAddress(\n  fid: number,\n  options?: GetFarcasterUserAddressOptions,\n): Promise<GetFarcasterUserAddressResponse | null> {\n  try {\n    const hasCustodyAddress = options?.hasCustodyAddress ?? true;\n    const hasVerifiedAddresses = options?.hasVerifiedAddresses ?? true;\n    const response: GetFarcasterUserAddressResponse = {};\n\n    if (hasCustodyAddress) {\n      const custodyAddress = await getCustodyAddressForFidNeynar(\n        fid,\n        options?.neynarApiKey,\n      );\n      if (custodyAddress) {\n        response.custodyAddress = custodyAddress;\n      }\n    }\n\n    if (hasVerifiedAddresses) {\n      const verifiedAddresses = await getVerifiedAddressesForFidNeynar(\n        fid,\n        options?.neynarApiKey,\n      );\n      if (verifiedAddresses) {\n        response.verifiedAddresses = verifiedAddresses;\n      }\n    }\n\n    return response;\n  } catch (_e) {\n    return null;\n  }\n}\n\nexport { getFarcasterUserAddress };\n"],"mappings":";;;;AAAO,IAAMA,UAAU;;;ACAhB,IAAMC,cAAN,MAAMA,oBAAmBC,MAAAA;EAC9BC,YAAYC,SAAiB;AAC3B,UAAMA,OAAAA;AACN,SAAKC,OAAO;EACd;AACF;AALgCH;AAAzB,IAAMD,aAAN;;;ACIA,IAAMK,yBAAyB;;;ACAtC,eAAsBC,kBACpBC,KACAC,SAAiBC,wBAAsB;AAEvC,QAAMC,UAAU;IACdC,QAAQ;IACRJ;IACAK,SAAS;MACPC,QAAQ;MACRC,SAASN;MACT,gBAAgB;MAChBO,oBAAoBC;IACtB;EACF;AACA,QAAMC,OAAO,MAAMC,MAAMR,QAAQH,KAAKG,OAAAA;AACtC,MAAIO,KAAKE,WAAW,KAAK;AACvB,UAAM,IAAIC,WACR,yCAAyCH,KAAKE,MAAM,EAAE;EAE1D;AACA,SAAO,MAAMF,KAAKI,KAAI;AACxB;AArBsBf;;;ACDtB,eAAsBgB,8BACpBC,KACAC,SAAiBC,wBAAsB;AAEvC,QAAMC,MAAM,sDAAsDH,GAAAA;AAClE,QAAMI,eAAe,MAAMC,kBAAkBF,KAAKF,MAAAA;AAClD,MAAI,CAACG,cAAcE,QAAQ,CAAA,GAAIC,iBAAiB;AAC9C,UAAM,IAAIC,MAAM,oCAAoCR,GAAAA,EAAK;EAC3D;AACA,SAAOI,aAAaE,MAAM,CAAA,EAAGC;AAC/B;AAVsBR;;;ACAtB,eAAsBU,iCACpBC,KACAC,SAAiBC,wBAAsB;AAEvC,QAAMC,MAAM,sDAAsDH,GAAAA;AAClE,QAAMI,eAAe,MAAMC,kBAAkBF,KAAKF,MAAAA;AAClD,MAAI,CAACG,cAAcE,QAAQ,CAAA,GAAIC,eAAeC,QAAQ;AACpD,UAAM,IAAIC,MAAM,uCAAuCT,GAAAA,EAAK;EAC9D;AACA,SAAOI,aAAaE,MAAM,CAAA,EAAGC;AAC/B;AAVsBR;;;ACYtB,eAAeW,wBACbC,KACAC,SAAwC;AAExC,MAAI;AACF,UAAMC,oBAAoBD,SAASC,qBAAqB;AACxD,UAAMC,uBAAuBF,SAASE,wBAAwB;AAC9D,UAAMC,WAA4C,CAAC;AAEnD,QAAIF,mBAAmB;AACrB,YAAMG,iBAAiB,MAAMC,8BAC3BN,KACAC,SAASM,YAAAA;AAEX,UAAIF,gBAAgB;AAClBD,iBAASC,iBAAiBA;MAC5B;IACF;AAEA,QAAIF,sBAAsB;AACxB,YAAMK,oBAAoB,MAAMC,iCAC9BT,KACAC,SAASM,YAAAA;AAEX,UAAIC,mBAAmB;AACrBJ,iBAASI,oBAAoBA;MAC/B;IACF;AAEA,WAAOJ;EACT,SAASM,IAAI;AACX,WAAO;EACT;AACF;AAjCeX;","names":["version","FetchError","Error","constructor","message","name","NEYNAR_DEFAULT_API_KEY","getDataFromNeynar","url","apiKey","NEYNAR_DEFAULT_API_KEY","options","method","headers","accept","api_key","onchainkit_version","version","resp","fetch","status","FetchError","json","getCustodyAddressForFidNeynar","fid","apiKey","NEYNAR_DEFAULT_API_KEY","url","responseBody","getDataFromNeynar","users","custody_address","Error","getVerifiedAddressesForFidNeynar","fid","apiKey","NEYNAR_DEFAULT_API_KEY","url","responseBody","getDataFromNeynar","users","verifications","length","Error","getFarcasterUserAddress","fid","options","hasCustodyAddress","hasVerifiedAddresses","response","custodyAddress","getCustodyAddressForFidNeynar","neynarApiKey","verifiedAddresses","getVerifiedAddressesForFidNeynar","_e"]}