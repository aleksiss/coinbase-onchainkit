{"version":3,"sources":["../../src/styles/theme.ts","../../src/useIsMounted.ts","../../src/internal/hooks/usePreferredColorScheme.ts","../../src/useOnchainKit.tsx","../../src/OnchainKitProvider.tsx","../../src/OnchainKitConfig.ts","../../src/useTheme.ts","../../src/nft/types.ts","../../src/nft/components/NFTLifecycleProvider.tsx","../../src/internal/hooks/useValue.ts","../../src/nft/hooks/useLifecycleStatus.ts","../../src/nft/components/NFTProvider.tsx","../../src/nft/components/NFTMintCard.tsx","../../src/nft/components/NFTCard.tsx"],"sourcesContent":["import { clsx } from 'clsx';\nimport type { ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport const text = {\n  body: 'ock-font-family font-normal leading-normal',\n  caption: 'ock-font-family font-semibold text-xs leading-4',\n  headline: 'ock-font-family font-semibold leading-normal',\n  label1: 'ock-font-family font-semibold text-sm leading-5',\n  label2: 'ock-font-family text-sm leading-5',\n  legal: 'ock-font-family text-xs leading-4',\n  title1: 'ock-font-family font-semibold text-[1.75rem] leading-9',\n  title3: 'ock-font-family font-semibold text-xl leading-7',\n} as const;\n\nexport const pressable = {\n  default:\n    'cursor-pointer ock-bg-default active:bg-[var(--ock-bg-default-active)] hover:bg-[var(--ock-bg-default-hover)]',\n  alternate:\n    'cursor-pointer ock-bg-alternate active:bg-[var(--ock-bg-alternate-active)] hover:[var(--ock-bg-alternate-hover)]',\n  inverse:\n    'cursor-pointer ock-bg-inverse active:bg-[var(--ock-bg-inverse-active)] hover:bg-[var(--ock-bg-inverse-hover)]',\n  primary:\n    'cursor-pointer ock-bg-primary active:bg-[var(--ock-bg-primary-active)] hover:bg-[var(--ock-bg-primary-hover)]',\n  secondary:\n    'cursor-pointer ock-bg-secondary active:bg-[var(--ock-bg-secondary-active)] hover:bg-[var(--ock-bg-secondary-hover)]',\n  coinbaseBranding: 'cursor-pointer bg-[#0052FF] hover:bg-[#0045D8]',\n  shadow: 'ock-shadow-default',\n  disabled: 'opacity-[0.38] pointer-events-none',\n} as const;\n\nexport const background = {\n  default: 'ock-bg-default',\n  alternate: 'ock-bg-alternate',\n  inverse: 'ock-bg-inverse',\n  primary: 'ock-bg-primary',\n  secondary: 'ock-bg-secondary',\n  error: 'ock-bg-error',\n  warning: 'ock-bg-warning',\n  success: 'ock-bg-success',\n  washed: 'ock-bg-primary-washed',\n  disabled: 'ock-bg-primary-disabled',\n  reverse: 'ock-bg-default-reverse',\n} as const;\n\nexport const color = {\n  inverse: 'ock-text-inverse',\n  foreground: 'ock-text-foreground',\n  foregroundMuted: 'ock-text-foreground-muted',\n  error: 'ock-text-error',\n  primary: 'ock-text-primary',\n  success: 'ock-text-success',\n  warning: 'ock-text-warning',\n  disabled: 'ock-text-disabled',\n} as const;\n\nexport const fill = {\n  default: 'ock-fill-default',\n  defaultReverse: 'ock-fill-default-reverse',\n  inverse: 'ock-fill-inverse',\n  alternate: 'ock-fill-alternate',\n} as const;\n\nexport const border = {\n  default: 'ock-border-default',\n  defaultActive: 'ock-border-default-active',\n  radius: 'ock-border-radius',\n  radiusInner: 'ock-border-radius-inner',\n} as const;\n\nexport const placeholder = {\n  default: 'ock-placeholder-default',\n} as const;\n\nexport const icon = {\n  primary: 'ock-icon-color-primary',\n  foreground: 'ock-icon-color-foreground',\n  foregroundMuted: 'ock-icon-color-foreground-muted',\n  inverse: 'ock-icon-color-inverse',\n  error: 'ock-icon-color-error',\n  success: 'ock-icon-color-success',\n  warning: 'ock-icon-color-warning',\n} as const;\n\nexport const line = {\n  primary: 'ock-line-primary border',\n  default: 'ock-line-default border',\n  heavy: 'ock-line-heavy border',\n  inverse: 'ock-line-inverse border',\n} as const;\n","import { useEffect, useState } from 'react';\n\nexport function useIsMounted() {\n  const [isMounted, setIsMounted] = useState(false);\n  useEffect(() => {\n    setIsMounted(true);\n  });\n  return isMounted;\n}\n","import { useEffect, useState } from 'react';\n\nexport function usePreferredColorScheme(): 'light' | 'dark' {\n  const [colorScheme, setColorScheme] = useState<'light' | 'dark'>('light');\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    setColorScheme(mediaQuery.matches ? 'dark' : 'light');\n\n    function updateColorScheme(event: MediaQueryListEvent) {\n      setColorScheme(event.matches ? 'dark' : 'light');\n    }\n\n    mediaQuery.addEventListener('change', updateColorScheme);\n    return () => mediaQuery.removeEventListener('change', updateColorScheme);\n  }, []);\n\n  return colorScheme;\n}\n","import { useContext } from 'react';\nimport { OnchainKitContext } from './OnchainKitProvider';\n\nexport function useOnchainKit() {\n  return useContext(OnchainKitContext);\n}\n","import { createContext, useMemo } from 'react';\nimport { ONCHAIN_KIT_CONFIG, setOnchainKitConfig } from './OnchainKitConfig';\nimport { checkHashLength } from './internal/utils/checkHashLength';\nimport type { OnchainKitContextType, OnchainKitProviderReact } from './types';\n\nexport const OnchainKitContext =\n  createContext<OnchainKitContextType>(ONCHAIN_KIT_CONFIG);\n\n/**\n * Provides the OnchainKit React Context to the app.\n */\nexport function OnchainKitProvider({\n  address,\n  apiKey,\n  chain,\n  children,\n  config,\n  projectId,\n  rpcUrl,\n  schemaId,\n}: OnchainKitProviderReact) {\n  if (schemaId && !checkHashLength(schemaId, 64)) {\n    throw Error('EAS schemaId must be 64 characters prefixed with \"0x\"');\n  }\n\n  const value = useMemo(() => {\n    const defaultPaymasterUrl = apiKey\n      ? `https://api.developer.coinbase.com/rpc/v1/${chain.name\n          .replace(' ', '-')\n          .toLowerCase()}/${apiKey}`\n      : null;\n    const onchainKitConfig = {\n      address: address ?? null,\n      apiKey: apiKey ?? null,\n      chain: chain,\n      config: {\n        appearance: {\n          name: config?.appearance?.name,\n          logo: config?.appearance?.logo,\n          mode: config?.appearance?.mode ?? 'auto',\n          theme: config?.appearance?.theme ?? 'default',\n        },\n        paymaster: config?.paymaster || defaultPaymasterUrl,\n      },\n      projectId: projectId ?? null,\n      rpcUrl: rpcUrl ?? null,\n      schemaId: schemaId ?? null,\n    };\n    setOnchainKitConfig(onchainKitConfig);\n    return onchainKitConfig;\n  }, [address, apiKey, chain, config, projectId, rpcUrl, schemaId]);\n\n  return (\n    <OnchainKitContext.Provider value={value}>\n      {children}\n    </OnchainKitContext.Provider>\n  );\n}\n","import { baseSepolia } from 'viem/chains';\nimport type { OnchainKitConfig, SetOnchainKitConfig } from './types';\n\n// The ONCHAIN_KIT_CONFIG is not exported at index.ts,\n// but only acccessed through the get and set functions.\nexport const ONCHAIN_KIT_CONFIG: OnchainKitConfig = {\n  address: null,\n  apiKey: null,\n  chain: baseSepolia,\n  config: {\n    appearance: {\n      name: null,\n      logo: null,\n      mode: null,\n      theme: null,\n    },\n    paymaster: null,\n  },\n  rpcUrl: null,\n  schemaId: null,\n  projectId: null,\n};\n\n/**\n * Access the ONCHAIN_KIT_CONFIG object directly by providing the key.\n * This is powerful when you use OnchainKit utilities outside of the React context.\n */\nexport const getOnchainKitConfig = <K extends keyof typeof ONCHAIN_KIT_CONFIG>(\n  configName: K,\n): (typeof ONCHAIN_KIT_CONFIG)[K] => {\n  return ONCHAIN_KIT_CONFIG[configName];\n};\n\n/**\n * Update the ONCHAIN_KIT_CONFIG object directly by providing the properties to update.\n * This is powerful when you use OnchainKit utilities outside of the React context.\n */\nexport const setOnchainKitConfig = (properties: SetOnchainKitConfig) => {\n  Object.assign(ONCHAIN_KIT_CONFIG, properties);\n  return getOnchainKitConfig;\n};\n","import { usePreferredColorScheme } from './internal/hooks/usePreferredColorScheme';\nimport type { UseThemeReact } from './types';\nimport { useOnchainKit } from './useOnchainKit';\n\nexport function useTheme(): UseThemeReact {\n  const preferredMode = usePreferredColorScheme();\n  const {\n    config: { appearance } = {},\n  } = useOnchainKit();\n  const { theme = 'default', mode = 'auto' } = appearance || {};\n\n  if (theme === 'cyberpunk' || theme === 'base' || theme === 'hacker') {\n    return theme;\n  }\n\n  switch (mode) {\n    case 'auto':\n      return `${theme}-${preferredMode}` as UseThemeReact;\n    case 'dark':\n      return `${theme}-dark` as UseThemeReact;\n    case 'light':\n      return `${theme}-light` as UseThemeReact;\n    default:\n      // If mode is not set or is an invalid value, fall back to preferredMode\n      return `${theme}-${preferredMode}` as UseThemeReact;\n  }\n}\n","import type { ReactNode } from 'react';\nimport type { Address, Hex, TransactionReceipt } from 'viem';\nimport type { Call, TransactionError } from '../transaction/types';\n\nexport type ContractType = 'ERC721' | 'ERC1155';\n\nexport enum MediaType {\n  Image = 'image',\n  Video = 'video',\n  Audio = 'audio',\n  Unknown = 'unknown',\n}\n\n/* Lifecycle Provider */\n\nexport enum LifecycleType {\n  VIEW = 'view',\n  MINT = 'mint',\n}\n\nexport type NFTLifecycleProviderReact = {\n  type: LifecycleType;\n  onError?: (error: NFTError) => void;\n  onStatus?: (lifecycleStatus: LifecycleStatus) => void;\n  onSuccess?: (transactionReceipt?: TransactionReceipt) => void;\n  children: ReactNode;\n};\n\nexport type NFTLifecycleContextType = {\n  type: LifecycleType;\n  lifecycleStatus: LifecycleStatus;\n  updateLifecycleStatus: (status: LifecycleStatusUpdate) => void;\n};\n\n/* NFT Provider */\n\nexport type NFTContextType = {\n  contractAddress: `0x${string}`;\n  tokenId?: string;\n  isSponsored?: boolean; // Optional boolean to determine if the mint is sponsored by paymaster\n  quantity: number;\n  setQuantity: (quantity: string) => void;\n  buildMintTransaction?: BuildMintTransaction;\n} & NFTData;\n\nexport type NFTProviderReact = {\n  children: ReactNode;\n  contractAddress: `0x${string}`;\n  tokenId?: string;\n  isSponsored?: boolean; // Optional boolean to determine if the mint is sponsored by paymaster\n  useNFTData: UseNFTData;\n  buildMintTransaction?: BuildMintTransaction;\n};\n\nexport type NFTPrice = {\n  amount?: number;\n  currency?: string;\n  amountUSD?: number;\n};\n\ntype UseNFTData = (contractAddress: Hex, tokenId?: string) => NFTData;\n\n/**\n * Note: exported as public Type\n */\nexport type NFTData = {\n  // view components\n  name?: string; // required for NFTTitle and NFTCollectionTitle\n  description?: string; // not currently used\n  imageUrl?: string; // required for NFTMedia\n  animationUrl?: string; // required for NFTMedia (audio and video types)\n  /* supported mimeTypes:\n   * image = image/*\n   * video = video/*\n   * audio = audio/* | application/*\n   */\n  mimeType?: string; // required for NFTMedia (falls back to image)\n\n  // mint components\n  ownerAddress?: `0x${string}`; // required for NFTOwner\n  lastSoldPrice: NFTPrice; // required for NFTLastSoldPrice\n  contractType?: ContractType; // not currently used\n  mintDate?: Date; // required for NFTMintDate\n  price?: NFTPrice; // required for NFTAssetCost, NftTotalCost\n  mintFee?: NFTPrice; // required for NFTTotalCost\n  creatorAddress?: Hex; // required for NFTCreator\n  maxMintsPerWallet?: number; // required for NFTMintButton\n  isEligibleToMint?: boolean; // required for NFTMintButton\n  totalOwners?: number; // required for NFTMinters\n  recentOwners?: Address[]; // required for NFTMinters\n};\n\ntype BuildMintTransaction = (\n  props: BuildMintTransactionDataProps,\n) => Promise<Call[]>;\n\nexport type BuildMintTransactionDataProps = {\n  contractAddress: Hex;\n  takerAddress: Address;\n  tokenId?: string;\n  quantity: number;\n};\n\nexport type NFTReact = {\n  children: ReactNode;\n  className?: string;\n};\n\n/**\n * Note: exported as public Type\n */\nexport type NFTCardReact = {\n  children: React.ReactNode;\n  className?: string;\n  contractAddress: Hex;\n  tokenId: string;\n  useNFTData: UseNFTData; // Optional hook to override the default useNftData hook\n  onError?: (error: NFTError) => void; // An optional callback function that handles errors within the provider.\n  onStatus?: (lifecycleStatus: LifecycleStatus) => void; // An optional callback function that exposes the component lifecycle state\n  onSuccess?: (transactionReceipt?: TransactionReceipt) => void; // view will not pass transactionReceipt\n};\n\n/**\n * Note: exported as public Type\n * NFTMint must be used if the NFTMintButton is included\n */\nexport type NFTMintCardReact = {\n  children: ReactNode;\n  className?: string; // Optional className override for top div element.\n  contractAddress: Hex; // Contract address of the NFT\n  tokenId?: string; // Token ID of the NFT only required for ERC1155\n  isSponsored?: boolean; // Optional boolean to determine if the mint is sponsored by paymaster\n  useNFTData: UseNFTData; // Required hook to supply NFT data\n  buildMintTransaction: BuildMintTransaction; // Required function that builds the mint transaction\n  onError?: (error: NFTError) => void; // An optional callback function that handles errors within the provider.\n  onStatus?: (lifecycleStatus: LifecycleStatus) => void; // An optional callback function that exposes the component lifecycle state\n  onSuccess?: (transactionReceipt?: TransactionReceipt) => void; // mint will pass transactionReceipt\n};\n\n/**\n * Note: exported as public Type\n */\nexport type NFTError =\n  | {\n      code: string; // The error code representing the type of nft error.\n      error: string; // The error message providing details about the nft error.\n      message: string; // The error message providing details about the nft error.\n    }\n  | TransactionError;\n\nexport type LifecycleStatus =\n  | {\n      statusName: 'init';\n      statusData: null;\n    }\n  | {\n      statusName: 'error';\n      statusData: NFTError;\n    }\n  | {\n      statusName: 'mediaLoading';\n      statusData: {\n        mediaType: MediaType;\n        mediaUrl: string;\n      };\n    }\n  | {\n      statusName: 'mediaLoaded';\n      statusData: null;\n    }\n  | {\n      statusName: 'transactionPending'; // if the mutation is currently executing\n      statusData: null;\n    }\n  | {\n      statusName: 'transactionLegacyExecuted';\n      statusData: {\n        transactionHashList: Address[];\n      };\n    }\n  | {\n      statusName: 'success'; // if the last mutation attempt was successful\n      statusData: {\n        transactionReceipts: TransactionReceipt[];\n      };\n    };\n\ntype LifecycleStatusDataShared = Record<string, never>;\n\n// make all keys in T optional if they are in K\ntype PartialKeys<T, K extends keyof T> = Omit<T, K> &\n  Partial<Pick<T, K>> extends infer O\n  ? { [P in keyof O]: O[P] }\n  : never;\n\n// check if all keys in T are a key of LifecycleStatusDataShared\ntype AllKeysInShared<T> = keyof T extends keyof LifecycleStatusDataShared\n  ? true\n  : false;\n\n/**\n * LifecycleStatus updater type\n * Used to type the statuses used to update LifecycleStatus\n * LifecycleStatusData is persisted across state updates allowing SharedData to be optional except for in init step\n */\nexport type LifecycleStatusUpdate = LifecycleStatus extends infer T\n  ? T extends { statusName: infer N; statusData: infer D }\n    ? { statusName: N } & (N extends 'init' // statusData required in statusName \"init\"\n        ? { statusData: D }\n        : AllKeysInShared<D> extends true // is statusData is LifecycleStatusDataShared, make optional\n          ? {\n              statusData?: PartialKeys<\n                D,\n                keyof D & keyof LifecycleStatusDataShared\n              >;\n            } // make all keys in LifecycleStatusDataShared optional\n          : {\n              statusData: PartialKeys<\n                D,\n                keyof D & keyof LifecycleStatusDataShared\n              >;\n            })\n    : never\n  : never;\n","import { createContext, useContext, useEffect } from 'react';\nimport { useValue } from '../../internal/hooks/useValue';\nimport { useLifecycleStatus } from '../hooks/useLifecycleStatus';\nimport type {\n  NFTLifecycleContextType,\n  NFTLifecycleProviderReact,\n} from '../types';\n\nconst emptyContext = {} as NFTLifecycleContextType;\n\nexport const NFTLifecycleContext =\n  createContext<NFTLifecycleContextType>(emptyContext);\n\nexport function useNFTLifecycleContext() {\n  const context = useContext(NFTLifecycleContext);\n  if (context === emptyContext) {\n    throw new Error(\n      'useNFTLifecycleContext must be used within an NFTView or NFTMint component',\n    );\n  }\n  return context;\n}\n\nexport function NFTLifecycleProvider({\n  type,\n  onStatus,\n  onError,\n  onSuccess,\n  children,\n}: NFTLifecycleProviderReact) {\n  const [lifecycleStatus, updateLifecycleStatus] = useLifecycleStatus({\n    statusName: 'init',\n    statusData: null,\n  }); // Component lifecycle\n\n  // Component lifecycle emitters\n  useEffect(() => {\n    // Error\n    if (lifecycleStatus.statusName === 'error') {\n      onError?.(lifecycleStatus.statusData);\n    }\n    // Success\n    if (lifecycleStatus.statusName === 'success') {\n      onSuccess?.(lifecycleStatus.statusData?.transactionReceipts?.[0]);\n    }\n    // Emit Status\n    onStatus?.(lifecycleStatus);\n  }, [\n    onError,\n    onStatus,\n    onSuccess,\n    lifecycleStatus,\n    lifecycleStatus.statusData, // Keep statusData, so that the effect runs when it changes\n    lifecycleStatus.statusName, // Keep statusName, so that the effect runs when it changes\n  ]);\n\n  const value = useValue({\n    lifecycleStatus,\n    type,\n    updateLifecycleStatus,\n  });\n\n  return (\n    <NFTLifecycleContext.Provider value={value}>\n      {children}\n    </NFTLifecycleContext.Provider>\n  );\n}\n","import { useMemo } from 'react';\n\nexport function useValue<T>(object: T): T {\n  return useMemo(() => object, [object]);\n}\n","import { useCallback, useState } from 'react';\nimport type { LifecycleStatus, LifecycleStatusUpdate } from '../types';\n\ntype UseLifecycleStatusReturn = [\n  lifecycleStatus: LifecycleStatus,\n  updatelifecycleStatus: (newStatus: LifecycleStatusUpdate) => void,\n];\n\nexport function useLifecycleStatus(\n  initialState: LifecycleStatus,\n): UseLifecycleStatusReturn {\n  const [lifecycleStatus, setLifecycleStatus] =\n    useState<LifecycleStatus>(initialState); // Component lifecycle\n\n  // Update lifecycle status, statusData will be persisted for the full lifecycle\n  const updateLifecycleStatus = useCallback(\n    (newStatus: LifecycleStatusUpdate) => {\n      setLifecycleStatus((prevStatus: LifecycleStatus) => {\n        // do not persist errors\n        const persistedStatusData =\n          prevStatus.statusName === 'error'\n            ? (({ error, code, message, ...statusData }) => statusData)(\n                prevStatus.statusData,\n              )\n            : prevStatus.statusData;\n        return {\n          statusName: newStatus.statusName,\n          statusData: {\n            ...persistedStatusData,\n            ...newStatus.statusData,\n          },\n        } as LifecycleStatus;\n      });\n    },\n    [],\n  );\n\n  return [lifecycleStatus, updateLifecycleStatus];\n}\n","import { createContext, useCallback, useContext, useState } from 'react';\nimport { useValue } from '../../internal/hooks/useValue';\nimport type { NFTContextType, NFTProviderReact } from '../types';\n\nconst emptyContext = {} as NFTContextType;\n\nexport const NFTContext = createContext<NFTContextType>(emptyContext);\n\nexport function useNFTContext() {\n  const context = useContext(NFTContext);\n  if (context === emptyContext) {\n    throw new Error(\n      'useNFTContext must be used within an NFTView or NFTMint component',\n    );\n  }\n  return context;\n}\n\nexport function NFTProvider({\n  children,\n  contractAddress,\n  tokenId,\n  isSponsored,\n  useNFTData,\n  buildMintTransaction,\n}: NFTProviderReact) {\n  const [quantity, setQuantity] = useState(1);\n\n  const nftData = useNFTData(contractAddress, tokenId);\n\n  const handleSetQuantity = useCallback((quantity: string) => {\n    setQuantity(Number.parseInt(quantity, 10));\n  }, []);\n\n  const value = useValue({\n    contractAddress,\n    tokenId,\n    isSponsored,\n    quantity,\n    setQuantity: handleSetQuantity,\n    buildMintTransaction,\n    ...nftData,\n  });\n\n  return <NFTContext.Provider value={value}>{children}</NFTContext.Provider>;\n}\n","import { background, border, cn, color } from '../../styles/theme';\nimport { useIsMounted } from '../../useIsMounted';\nimport { useTheme } from '../../useTheme';\nimport { LifecycleType, type NFTMintCardReact } from '../types';\nimport { NFTLifecycleProvider } from './NFTLifecycleProvider';\nimport { NFTProvider } from './NFTProvider';\n\nexport function NFTMintCard({\n  children,\n  className,\n  contractAddress,\n  tokenId,\n  isSponsored,\n  useNFTData,\n  buildMintTransaction,\n  onStatus,\n  onError,\n  onSuccess,\n}: NFTMintCardReact) {\n  const componentTheme = useTheme();\n\n  const isMounted = useIsMounted();\n\n  // prevents SSR hydration issue\n  if (!isMounted) {\n    return null;\n  }\n\n  return (\n    <NFTLifecycleProvider\n      type={LifecycleType.MINT}\n      onStatus={onStatus}\n      onError={onError}\n      onSuccess={onSuccess}\n    >\n      <NFTProvider\n        contractAddress={contractAddress}\n        tokenId={tokenId}\n        isSponsored={isSponsored}\n        useNFTData={useNFTData}\n        buildMintTransaction={buildMintTransaction}\n      >\n        <div\n          className={cn(\n            componentTheme,\n            color.foreground,\n            background.default,\n            border.defaultActive,\n            border.radius,\n            'flex w-full max-w-[500px] flex-col border px-6 py-4',\n            className,\n          )}\n          data-testid=\"ockNFTMintCard_Container\"\n        >\n          {children}\n        </div>\n      </NFTProvider>\n    </NFTLifecycleProvider>\n  );\n}\n","import { useCallback } from 'react';\nimport { useAccount } from 'wagmi';\nimport { border, cn, color, pressable } from '../../styles/theme';\nimport { useIsMounted } from '../../useIsMounted';\nimport { useTheme } from '../../useTheme';\nimport { LifecycleType, type NFTCardReact } from '../types';\nimport { NFTLifecycleProvider } from './NFTLifecycleProvider';\nimport { NFTProvider } from './NFTProvider';\n\nexport function NFTCard({\n  children,\n  className,\n  contractAddress,\n  tokenId,\n  useNFTData,\n  onStatus,\n  onError,\n  onSuccess,\n}: NFTCardReact) {\n  const componentTheme = useTheme();\n\n  const isMounted = useIsMounted();\n\n  const { chain } = useAccount();\n\n  const handleOnClick = useCallback(() => {\n    const network = chain?.name.toLowerCase() ?? 'base';\n    const openSeaUrl = `https://opensea.io/assets/${network}/${contractAddress}/${tokenId}`;\n    window.open(openSeaUrl, '_blank', 'noopener,noreferrer');\n  }, [chain, contractAddress, tokenId]);\n\n  // prevents SSR hydration issue\n  if (!isMounted) {\n    return null;\n  }\n\n  return (\n    <NFTLifecycleProvider\n      type={LifecycleType.VIEW}\n      onStatus={onStatus}\n      onError={onError}\n      onSuccess={onSuccess}\n    >\n      <NFTProvider\n        contractAddress={contractAddress}\n        tokenId={tokenId}\n        useNFTData={useNFTData}\n      >\n        <button\n          type=\"button\"\n          className={cn(\n            componentTheme,\n            color.foreground,\n            pressable.default,\n            border.radius,\n            'flex w-full max-w-[500px] flex-col items-stretch border p-4 text-left',\n            `hover:border-[${border.defaultActive}]`,\n            className,\n          )}\n          data-testid=\"ockNFTCard_Container\"\n          onClick={handleOnClick}\n        >\n          {children}\n        </button>\n      </NFTProvider>\n    </NFTLifecycleProvider>\n  );\n}\n"],"mappings":"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","names":["clsx","twMerge","cn","inputs","twMerge","clsx","pressable","default","alternate","inverse","primary","secondary","coinbaseBranding","shadow","disabled","background","error","warning","success","washed","reverse","color","foreground","foregroundMuted","border","default","defaultActive","radius","radiusInner","useEffect","useState","useIsMounted","isMounted","setIsMounted","useState","useEffect","useEffect","useState","usePreferredColorScheme","colorScheme","setColorScheme","useState","useEffect","mediaQuery","window","matchMedia","matches","updateColorScheme","event","addEventListener","removeEventListener","useContext","createContext","useMemo","baseSepolia","ONCHAIN_KIT_CONFIG","address","apiKey","chain","baseSepolia","config","appearance","name","logo","mode","theme","paymaster","rpcUrl","schemaId","projectId","OnchainKitContext","createContext","ONCHAIN_KIT_CONFIG","useOnchainKit","useContext","OnchainKitContext","useTheme","preferredMode","usePreferredColorScheme","config","appearance","useOnchainKit","theme","mode","LifecycleType","createContext","useContext","useEffect","useMemo","useValue","object","useMemo","useCallback","useState","useLifecycleStatus","initialState","lifecycleStatus","setLifecycleStatus","useState","updateLifecycleStatus","useCallback","newStatus","prevStatus","persistedStatusData","statusName","error","code","message","statusData","emptyContext","NFTLifecycleContext","createContext","NFTLifecycleProvider","type","onStatus","onError","onSuccess","children","lifecycleStatus","updateLifecycleStatus","useLifecycleStatus","statusName","statusData","useEffect","transactionReceipts","value","useValue","NFTLifecycleContext","Provider","createContext","useCallback","useContext","useState","emptyContext","NFTContext","createContext","NFTProvider","children","contractAddress","tokenId","isSponsored","useNFTData","buildMintTransaction","quantity","setQuantity","useState","nftData","handleSetQuantity","useCallback","Number","parseInt","value","useValue","NFTContext","Provider","NFTMintCard","children","className","contractAddress","tokenId","isSponsored","useNFTData","buildMintTransaction","onStatus","onError","onSuccess","componentTheme","useTheme","isMounted","useIsMounted","NFTLifecycleProvider","type","LifecycleType","MINT","NFTProvider","div","cn","color","foreground","background","default","border","defaultActive","radius","data-testid","useCallback","useAccount","NFTCard","children","className","contractAddress","tokenId","useNFTData","onStatus","onError","onSuccess","componentTheme","useTheme","isMounted","useIsMounted","chain","useAccount","handleOnClick","useCallback","network","name","toLowerCase","openSeaUrl","window","open","NFTLifecycleProvider","type","LifecycleType","VIEW","NFTProvider","button","cn","color","foreground","pressable","default","border","radius","defaultActive","data-testid","onClick"]}