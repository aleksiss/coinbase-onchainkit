{"version":3,"sources":["../../src/styles/theme.ts","../../src/useIsMounted.ts","../../src/useOnchainKit.tsx","../../src/OnchainKitProvider.tsx","../../src/OnchainKitConfig.ts","../../src/internal/hooks/usePreferredColorScheme.ts","../../src/useTheme.ts","../../src/transaction/components/TransactionProvider.tsx","../../src/constants.ts","../../src/internal/hooks/useCapabilitiesSafe.ts","../../src/internal/hooks/useValue.ts","../../src/transaction/constants.ts","../../src/transaction/hooks/useCallsStatus.ts","../../src/transaction/hooks/useSendCall.ts","../../src/transaction/utils/isUserRejectedRequestError.ts","../../src/transaction/hooks/useSendCalls.ts","../../src/transaction/hooks/useSendWalletTransactions.tsx","../../src/transaction/utils/sendBatchedTransactions.ts","../../src/transaction/utils/sendSingleTransactions.ts","../../src/transaction/hooks/useWriteContract.ts","../../src/transaction/hooks/useWriteContracts.ts","../../src/transaction/utils/getPaymasterUrl.ts","../../src/transaction/components/Transaction.tsx","../../src/transaction/components/TransactionButton.tsx","../../src/internal/components/Spinner.tsx","../../src/network/getChainExplorer.ts","../../src/transaction/utils/isSpinnerDisplayed.ts","../../src/transaction/components/TransactionToast.tsx","../../src/internal/svg/closeSvg.tsx","../../src/transaction/hooks/useGetTransactionToastAction.tsx","../../src/transaction/components/TransactionToastAction.tsx","../../src/transaction/components/TransactionToastIcon.tsx","../../src/internal/svg/errorSvg.tsx","../../src/internal/svg/successSvg.tsx","../../src/transaction/hooks/useGetTransactionToastLabel.tsx","../../src/transaction/components/TransactionToastLabel.tsx","../../src/transaction/components/TransactionDefault.tsx","../../src/transaction/components/TransactionSponsor.tsx","../../src/transaction/components/TransactionStatus.tsx","../../src/transaction/hooks/useGetTransactionStatusAction.tsx","../../src/transaction/components/TransactionStatusAction.tsx","../../src/transaction/hooks/useGetTransactionStatusLabel.tsx","../../src/transaction/components/TransactionStatusLabel.tsx"],"sourcesContent":["import { clsx } from 'clsx';\nimport type { ClassValue } from 'clsx';\nimport { twMerge } from 'tailwind-merge';\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs));\n}\n\nexport const text = {\n  body: 'ock-font-family font-normal leading-normal',\n  caption: 'ock-font-family font-semibold text-xs leading-4',\n  headline: 'ock-font-family font-semibold leading-normal',\n  label1: 'ock-font-family font-semibold text-sm leading-5',\n  label2: 'ock-font-family text-sm leading-5',\n  legal: 'ock-font-family text-xs leading-4',\n  title1: 'ock-font-family font-semibold text-[1.75rem] leading-9',\n  title3: 'ock-font-family font-semibold text-xl leading-7',\n} as const;\n\nexport const pressable = {\n  default:\n    'cursor-pointer ock-bg-default active:bg-[var(--ock-bg-default-active)] hover:bg-[var(--ock-bg-default-hover)]',\n  alternate:\n    'cursor-pointer ock-bg-alternate active:bg-[var(--ock-bg-alternate-active)] hover:[var(--ock-bg-alternate-hover)]',\n  inverse:\n    'cursor-pointer ock-bg-inverse active:bg-[var(--ock-bg-inverse-active)] hover:bg-[var(--ock-bg-inverse-hover)]',\n  primary:\n    'cursor-pointer ock-bg-primary active:bg-[var(--ock-bg-primary-active)] hover:bg-[var(--ock-bg-primary-hover)]',\n  secondary:\n    'cursor-pointer ock-bg-secondary active:bg-[var(--ock-bg-secondary-active)] hover:bg-[var(--ock-bg-secondary-hover)]',\n  coinbaseBranding: 'cursor-pointer bg-[#0052FF] hover:bg-[#0045D8]',\n  shadow: 'ock-shadow-default',\n  disabled: 'opacity-[0.38] pointer-events-none',\n} as const;\n\nexport const background = {\n  default: 'ock-bg-default',\n  alternate: 'ock-bg-alternate',\n  inverse: 'ock-bg-inverse',\n  primary: 'ock-bg-primary',\n  secondary: 'ock-bg-secondary',\n  error: 'ock-bg-error',\n  warning: 'ock-bg-warning',\n  success: 'ock-bg-success',\n  washed: 'ock-bg-primary-washed',\n  disabled: 'ock-bg-primary-disabled',\n  reverse: 'ock-bg-default-reverse',\n} as const;\n\nexport const color = {\n  inverse: 'ock-text-inverse',\n  foreground: 'ock-text-foreground',\n  foregroundMuted: 'ock-text-foreground-muted',\n  error: 'ock-text-error',\n  primary: 'ock-text-primary',\n  success: 'ock-text-success',\n  warning: 'ock-text-warning',\n  disabled: 'ock-text-disabled',\n} as const;\n\nexport const fill = {\n  default: 'ock-fill-default',\n  defaultReverse: 'ock-fill-default-reverse',\n  inverse: 'ock-fill-inverse',\n  alternate: 'ock-fill-alternate',\n} as const;\n\nexport const border = {\n  default: 'ock-border-default',\n  defaultActive: 'ock-border-default-active',\n  radius: 'ock-border-radius',\n  radiusInner: 'ock-border-radius-inner',\n} as const;\n\nexport const placeholder = {\n  default: 'ock-placeholder-default',\n} as const;\n\nexport const icon = {\n  primary: 'ock-icon-color-primary',\n  foreground: 'ock-icon-color-foreground',\n  foregroundMuted: 'ock-icon-color-foreground-muted',\n  inverse: 'ock-icon-color-inverse',\n  error: 'ock-icon-color-error',\n  success: 'ock-icon-color-success',\n  warning: 'ock-icon-color-warning',\n} as const;\n\nexport const line = {\n  primary: 'ock-line-primary border',\n  default: 'ock-line-default border',\n  heavy: 'ock-line-heavy border',\n  inverse: 'ock-line-inverse border',\n} as const;\n","import { useEffect, useState } from 'react';\n\nexport function useIsMounted() {\n  const [isMounted, setIsMounted] = useState(false);\n  useEffect(() => {\n    setIsMounted(true);\n  });\n  return isMounted;\n}\n","import { useContext } from 'react';\nimport { OnchainKitContext } from './OnchainKitProvider';\n\nexport function useOnchainKit() {\n  return useContext(OnchainKitContext);\n}\n","import { createContext, useMemo } from 'react';\nimport { ONCHAIN_KIT_CONFIG, setOnchainKitConfig } from './OnchainKitConfig';\nimport { checkHashLength } from './internal/utils/checkHashLength';\nimport type { OnchainKitContextType, OnchainKitProviderReact } from './types';\n\nexport const OnchainKitContext =\n  createContext<OnchainKitContextType>(ONCHAIN_KIT_CONFIG);\n\n/**\n * Provides the OnchainKit React Context to the app.\n */\nexport function OnchainKitProvider({\n  address,\n  apiKey,\n  chain,\n  children,\n  config,\n  projectId,\n  rpcUrl,\n  schemaId,\n}: OnchainKitProviderReact) {\n  if (schemaId && !checkHashLength(schemaId, 64)) {\n    throw Error('EAS schemaId must be 64 characters prefixed with \"0x\"');\n  }\n\n  const value = useMemo(() => {\n    const defaultPaymasterUrl = apiKey\n      ? `https://api.developer.coinbase.com/rpc/v1/${chain.name\n          .replace(' ', '-')\n          .toLowerCase()}/${apiKey}`\n      : null;\n    const onchainKitConfig = {\n      address: address ?? null,\n      apiKey: apiKey ?? null,\n      chain: chain,\n      config: {\n        appearance: {\n          name: config?.appearance?.name,\n          logo: config?.appearance?.logo,\n          mode: config?.appearance?.mode ?? 'auto',\n          theme: config?.appearance?.theme ?? 'default',\n        },\n        paymaster: config?.paymaster || defaultPaymasterUrl,\n      },\n      projectId: projectId ?? null,\n      rpcUrl: rpcUrl ?? null,\n      schemaId: schemaId ?? null,\n    };\n    setOnchainKitConfig(onchainKitConfig);\n    return onchainKitConfig;\n  }, [address, apiKey, chain, config, projectId, rpcUrl, schemaId]);\n\n  return (\n    <OnchainKitContext.Provider value={value}>\n      {children}\n    </OnchainKitContext.Provider>\n  );\n}\n","import { baseSepolia } from 'viem/chains';\nimport type { OnchainKitConfig, SetOnchainKitConfig } from './types';\n\n// The ONCHAIN_KIT_CONFIG is not exported at index.ts,\n// but only acccessed through the get and set functions.\nexport const ONCHAIN_KIT_CONFIG: OnchainKitConfig = {\n  address: null,\n  apiKey: null,\n  chain: baseSepolia,\n  config: {\n    appearance: {\n      name: null,\n      logo: null,\n      mode: null,\n      theme: null,\n    },\n    paymaster: null,\n  },\n  rpcUrl: null,\n  schemaId: null,\n  projectId: null,\n};\n\n/**\n * Access the ONCHAIN_KIT_CONFIG object directly by providing the key.\n * This is powerful when you use OnchainKit utilities outside of the React context.\n */\nexport const getOnchainKitConfig = <K extends keyof typeof ONCHAIN_KIT_CONFIG>(\n  configName: K,\n): (typeof ONCHAIN_KIT_CONFIG)[K] => {\n  return ONCHAIN_KIT_CONFIG[configName];\n};\n\n/**\n * Update the ONCHAIN_KIT_CONFIG object directly by providing the properties to update.\n * This is powerful when you use OnchainKit utilities outside of the React context.\n */\nexport const setOnchainKitConfig = (properties: SetOnchainKitConfig) => {\n  Object.assign(ONCHAIN_KIT_CONFIG, properties);\n  return getOnchainKitConfig;\n};\n","import { useEffect, useState } from 'react';\n\nexport function usePreferredColorScheme(): 'light' | 'dark' {\n  const [colorScheme, setColorScheme] = useState<'light' | 'dark'>('light');\n\n  useEffect(() => {\n    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\n    setColorScheme(mediaQuery.matches ? 'dark' : 'light');\n\n    function updateColorScheme(event: MediaQueryListEvent) {\n      setColorScheme(event.matches ? 'dark' : 'light');\n    }\n\n    mediaQuery.addEventListener('change', updateColorScheme);\n    return () => mediaQuery.removeEventListener('change', updateColorScheme);\n  }, []);\n\n  return colorScheme;\n}\n","import { usePreferredColorScheme } from './internal/hooks/usePreferredColorScheme';\nimport type { UseThemeReact } from './types';\nimport { useOnchainKit } from './useOnchainKit';\n\nexport function useTheme(): UseThemeReact {\n  const preferredMode = usePreferredColorScheme();\n  const {\n    config: { appearance } = {},\n  } = useOnchainKit();\n  const { theme = 'default', mode = 'auto' } = appearance || {};\n\n  if (theme === 'cyberpunk' || theme === 'base' || theme === 'hacker') {\n    return theme;\n  }\n\n  switch (mode) {\n    case 'auto':\n      return `${theme}-${preferredMode}` as UseThemeReact;\n    case 'dark':\n      return `${theme}-dark` as UseThemeReact;\n    case 'light':\n      return `${theme}-light` as UseThemeReact;\n    default:\n      // If mode is not set or is an invalid value, fall back to preferredMode\n      return `${theme}-${preferredMode}` as UseThemeReact;\n  }\n}\n","import {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from 'react';\nimport type { Address } from 'viem';\nimport {\n  useAccount,\n  useConfig,\n  useSwitchChain,\n  useWaitForTransactionReceipt,\n} from 'wagmi';\nimport { waitForTransactionReceipt } from 'wagmi/actions';\nimport { Capabilities } from '../../constants';\nimport { useCapabilitiesSafe } from '../../internal/hooks/useCapabilitiesSafe';\nimport { useValue } from '../../internal/hooks/useValue';\nimport { useOnchainKit } from '../../useOnchainKit';\nimport {\n  GENERIC_ERROR_MESSAGE,\n  TRANSACTION_TYPE_CALLS,\n  TRANSACTION_TYPE_CONTRACTS,\n} from '../constants';\nimport { useCallsStatus } from '../hooks/useCallsStatus';\nimport { useSendCall } from '../hooks/useSendCall';\nimport { useSendCalls } from '../hooks/useSendCalls';\nimport { useSendWalletTransactions } from '../hooks/useSendWalletTransactions';\nimport { useWriteContract } from '../hooks/useWriteContract';\nimport { useWriteContracts } from '../hooks/useWriteContracts';\nimport type {\n  LifecycleStatus,\n  TransactionContextType,\n  TransactionProviderReact,\n} from '../types';\nimport { getPaymasterUrl } from '../utils/getPaymasterUrl';\nimport { isUserRejectedRequestError } from '../utils/isUserRejectedRequestError';\n\nconst emptyContext = {} as TransactionContextType;\nexport const TransactionContext =\n  createContext<TransactionContextType>(emptyContext);\n\nexport function useTransactionContext() {\n  const context = useContext(TransactionContext);\n  if (context === emptyContext) {\n    throw new Error(\n      'useTransactionContext must be used within a Transaction component',\n    );\n  }\n  return context;\n}\n\nexport function TransactionProvider({\n  calls,\n  capabilities: transactionCapabilities,\n  chainId,\n  children,\n  contracts,\n  isSponsored,\n  onError,\n  onStatus,\n  onSuccess,\n}: TransactionProviderReact) {\n  // Core Hooks\n  const account = useAccount();\n  const config = useConfig();\n  const {\n    config: { paymaster } = { paymaster: undefined },\n  } = useOnchainKit();\n\n  const [errorMessage, setErrorMessage] = useState('');\n  const [errorCode, setErrorCode] = useState('');\n  const [isToastVisible, setIsToastVisible] = useState(false);\n  const [lifecycleStatus, setLifecycleStatus] = useState<LifecycleStatus>({\n    statusName: 'init',\n    statusData: null,\n  }); // Component lifecycle\n  const [transactionId, setTransactionId] = useState('');\n  const [transactionCount, setTransactionCount] = useState<\n    number | undefined\n  >();\n  const [transactionHashList, setTransactionHashList] = useState<Address[]>([]);\n  const transactions = calls || contracts;\n  const transactionType = calls\n    ? TRANSACTION_TYPE_CALLS\n    : TRANSACTION_TYPE_CONTRACTS;\n\n  // Retrieve wallet capabilities\n  const walletCapabilities = useCapabilitiesSafe({\n    chainId,\n  });\n\n  const { switchChainAsync } = useSwitchChain();\n\n  // Validate `calls` and `contracts` props\n  if (!contracts && !calls) {\n    throw new Error(\n      'Transaction: One of contracts or calls must be provided as a prop to the Transaction component.',\n    );\n  }\n  if (calls && contracts) {\n    throw new Error(\n      'Transaction: Only one of contracts or calls can be provided as a prop to the Transaction component.',\n    );\n  }\n\n  // useWriteContracts or useWriteContract\n  // Used for contract calls with an ABI and functions.\n  const { status: statusWriteContracts, writeContractsAsync } =\n    useWriteContracts({\n      setLifecycleStatus,\n      setTransactionId,\n    });\n  const {\n    status: statusWriteContract,\n    writeContractAsync,\n    data: writeContractTransactionHash,\n  } = useWriteContract({\n    setLifecycleStatus,\n    transactionHashList,\n  });\n  // useSendCalls or useSendCall\n  // Used for contract calls with raw calldata.\n  const { status: statusSendCalls, sendCallsAsync } = useSendCalls({\n    setLifecycleStatus,\n    setTransactionId,\n  });\n  const {\n    status: statusSendCall,\n    sendCallAsync,\n    data: sendCallTransactionHash,\n  } = useSendCall({\n    setLifecycleStatus,\n    transactionHashList,\n  });\n\n  // Transaction Status\n  // For batched, use statusSendCalls or statusWriteContracts\n  // For single, use statusSendCall or statusWriteContract\n  const transactionStatus = useMemo(() => {\n    const transactionStatuses = walletCapabilities[Capabilities.AtomicBatch]\n      ?.supported\n      ? {\n          [TRANSACTION_TYPE_CALLS]: statusSendCalls,\n          [TRANSACTION_TYPE_CONTRACTS]: statusWriteContracts,\n        }\n      : {\n          [TRANSACTION_TYPE_CALLS]: statusSendCall,\n          [TRANSACTION_TYPE_CONTRACTS]: statusWriteContract,\n        };\n    return transactionStatuses[transactionType];\n  }, [\n    statusSendCalls,\n    statusWriteContracts,\n    statusSendCall,\n    statusWriteContract,\n    transactionType,\n    walletCapabilities[Capabilities.AtomicBatch],\n  ]);\n\n  // Transaction hash for single transaction (non-batched)\n  const singleTransactionHash =\n    writeContractTransactionHash || sendCallTransactionHash;\n\n  const capabilities = useMemo(() => {\n    if (isSponsored && paymaster) {\n      return {\n        paymasterService: { url: paymaster },\n        // this needs to be below so devs can override default paymaster\n        // with their personal paymaster in production playgroundd\n        ...transactionCapabilities,\n      };\n    }\n    return transactionCapabilities;\n  }, [isSponsored, paymaster, transactionCapabilities]);\n\n  // useSendWalletTransactions\n  // Used to send transactions based on the transaction type. Can be of type calls or contracts.\n  const sendWalletTransactions = useSendWalletTransactions({\n    capabilities,\n    sendCallAsync,\n    sendCallsAsync,\n    transactionType,\n    walletCapabilities,\n    writeContractAsync,\n    writeContractsAsync,\n  });\n\n  const { transactionHash: batchedTransactionHash, status: callStatus } =\n    useCallsStatus({\n      setLifecycleStatus,\n      transactionId,\n    });\n  const { data: receipt } = useWaitForTransactionReceipt({\n    hash: singleTransactionHash || batchedTransactionHash,\n  });\n\n  // Component lifecycle emitters\n  useEffect(() => {\n    setErrorMessage('');\n    // Error\n    if (lifecycleStatus.statusName === 'error') {\n      setErrorMessage(lifecycleStatus.statusData.message);\n      setErrorCode(lifecycleStatus.statusData.code);\n      onError?.(lifecycleStatus.statusData);\n    }\n    // Transaction Legacy Executed\n    if (lifecycleStatus.statusName === 'transactionLegacyExecuted') {\n      setTransactionHashList(lifecycleStatus.statusData.transactionHashList);\n    }\n    // Success\n    if (lifecycleStatus.statusName === 'success') {\n      onSuccess?.({\n        transactionReceipts: lifecycleStatus.statusData.transactionReceipts,\n      });\n    }\n    // Emit Status\n    onStatus?.(lifecycleStatus);\n  }, [\n    onError,\n    onStatus,\n    onSuccess,\n    lifecycleStatus,\n    lifecycleStatus.statusData, // Keep statusData, so that the effect runs when it changes\n    lifecycleStatus.statusName, // Keep statusName, so that the effect runs when it changes\n  ]);\n\n  // Set transaction pending status when writeContracts or writeContract is pending\n  useEffect(() => {\n    if (transactionStatus === 'pending') {\n      setLifecycleStatus({\n        statusName: 'transactionPending',\n        statusData: null,\n      });\n    }\n  }, [transactionStatus]);\n\n  // Trigger success status when receipt is generated by useWaitForTransactionReceipt\n  useEffect(() => {\n    if (!receipt) {\n      return;\n    }\n    setLifecycleStatus({\n      statusName: 'success',\n      statusData: {\n        transactionReceipts: [receipt],\n      },\n    });\n  }, [receipt]);\n\n  // When all transactions are succesful, get the receipts\n  useEffect(() => {\n    if (\n      !transactions ||\n      transactionHashList.length !== transactionCount ||\n      transactionCount < 2\n    ) {\n      return;\n    }\n    getTransactionLegacyReceipts();\n  }, [transactions, transactionCount, transactionHashList]);\n\n  const getTransactionLegacyReceipts = useCallback(async () => {\n    const receipts = [];\n    for (const hash of transactionHashList) {\n      try {\n        const txnReceipt = await waitForTransactionReceipt(config, {\n          hash,\n          chainId,\n        });\n        receipts.push(txnReceipt);\n      } catch (err) {\n        setLifecycleStatus({\n          statusName: 'error',\n          statusData: {\n            code: 'TmTPc01', // Transaction module TransactionProvider component 01 error\n            error: JSON.stringify(err),\n            message: GENERIC_ERROR_MESSAGE,\n          },\n        });\n      }\n    }\n    setLifecycleStatus({\n      statusName: 'success',\n      statusData: {\n        transactionReceipts: receipts,\n      },\n    });\n  }, [chainId, config, transactionHashList]);\n\n  const switchChain = useCallback(\n    async (targetChainId: number | undefined) => {\n      if (targetChainId && account.chainId !== targetChainId) {\n        await switchChainAsync({ chainId: targetChainId });\n      }\n    },\n    [account.chainId, switchChainAsync],\n  );\n\n  const buildTransaction = useCallback(async () => {\n    setLifecycleStatus({\n      statusName: 'buildingTransaction',\n      statusData: null,\n    });\n    try {\n      const resolvedTransactions = await (typeof transactions === 'function'\n        ? transactions()\n        : Promise.resolve(transactions));\n      setTransactionCount(resolvedTransactions?.length);\n      return resolvedTransactions;\n    } catch (err) {\n      setLifecycleStatus({\n        statusName: 'error',\n        statusData: {\n          code: 'TmTPc04', // Transaction module TransactionProvider component 04 error\n          error: JSON.stringify(err),\n          message: 'Error building transactions',\n        },\n      });\n      return undefined;\n    }\n  }, [transactions]);\n\n  const handleSubmit = useCallback(async () => {\n    setErrorMessage('');\n    setIsToastVisible(true);\n    try {\n      // Switch chain before attempting transactions\n      await switchChain(chainId);\n      const resolvedTransactions = await buildTransaction();\n      await sendWalletTransactions(resolvedTransactions);\n    } catch (err) {\n      const errorMessage = isUserRejectedRequestError(err)\n        ? 'Request denied.'\n        : GENERIC_ERROR_MESSAGE;\n      setLifecycleStatus({\n        statusName: 'error',\n        statusData: {\n          code: 'TmTPc03', // Transaction module TransactionProvider component 03 error\n          error: JSON.stringify(err),\n          message: errorMessage,\n        },\n      });\n    }\n  }, [buildTransaction, chainId, sendWalletTransactions, switchChain]);\n\n  const value = useValue({\n    chainId,\n    errorCode,\n    errorMessage,\n    isLoading: callStatus === 'PENDING',\n    isToastVisible,\n    lifecycleStatus,\n    onSubmit: handleSubmit,\n    paymasterUrl: getPaymasterUrl(capabilities),\n    receipt,\n    setIsToastVisible,\n    setLifecycleStatus,\n    setTransactionId,\n    transactions,\n    transactionId,\n    transactionHash: singleTransactionHash || batchedTransactionHash,\n    transactionCount,\n  });\n  return (\n    <TransactionContext.Provider value={value}>\n      {children}\n    </TransactionContext.Provider>\n  );\n}\n","// Capabilities\nexport enum Capabilities {\n  AtomicBatch = 'atomicBatch',\n  AuxiliaryFunds = 'auxiliaryFunds',\n  PaymasterService = 'paymasterService',\n}\n","import { useMemo } from 'react';\nimport type { WalletCapabilities } from 'viem';\nimport { useAccount } from 'wagmi';\nimport { useCapabilities } from 'wagmi/experimental';\nimport type { UseCapabilitiesSafeParams } from '../../types';\n\nexport function useCapabilitiesSafe({\n  chainId,\n}: UseCapabilitiesSafeParams): WalletCapabilities {\n  const { isConnected } = useAccount();\n\n  const { data: capabilities, error } = useCapabilities({\n    query: { enabled: isConnected },\n  });\n\n  return useMemo(() => {\n    if (error || !capabilities || !capabilities[chainId]) {\n      return {};\n    }\n\n    return capabilities[chainId];\n  }, [capabilities, chainId, error]);\n}\n","import { useMemo } from 'react';\n\nexport function useValue<T>(object: T): T {\n  return useMemo(() => object, [object]);\n}\n","export const GENERIC_ERROR_MESSAGE = 'Something went wrong. Please try again.';\n// Most likely EOAexport const genericErrorMessage = 'Something went wrong. Please try again.';\nexport const METHOD_NOT_SUPPORTED_ERROR_SUBSTRING =\n  'this request method is not supported';\nexport const SEND_CALLS_NOT_SUPPORTED_ERROR = 'SEND_CALLS_NOT_SUPPORTED_ERROR';\nexport const TRANSACTION_TYPE_CALLS = 'TRANSACTION_TYPE_CALLS';\nexport const TRANSACTION_TYPE_CONTRACTS = 'TRANSACTION_TYPE_CONTRACTS';\n","import { useCallsStatus as useCallsStatusWagmi } from 'wagmi/experimental';\nimport type { UseCallsStatusParams } from '../types';\n\nexport function useCallsStatus({\n  setLifecycleStatus,\n  transactionId,\n}: UseCallsStatusParams) {\n  try {\n    const { data } = useCallsStatusWagmi({\n      id: transactionId,\n      query: {\n        refetchInterval: (query) => {\n          return query.state.data?.status === 'CONFIRMED' ? false : 1000;\n        },\n        enabled: !!transactionId,\n      },\n    });\n    const transactionHash = data?.receipts?.[0]?.transactionHash;\n    return { status: data?.status, transactionHash };\n  } catch (err) {\n    setLifecycleStatus({\n      statusName: 'error',\n      statusData: {\n        code: 'TmUCSh01',\n        error: JSON.stringify(err),\n        message: '',\n      },\n    });\n    return { status: 'error', transactionHash: undefined };\n  }\n}\n","import type { Address } from 'viem';\nimport { useSendTransaction as useSendCallWagmi } from 'wagmi';\nimport { GENERIC_ERROR_MESSAGE } from '../constants';\nimport type { UseSendCallParams } from '../types';\nimport { isUserRejectedRequestError } from '../utils/isUserRejectedRequestError';\n\n/**\n * Wagmi hook for single transactions with calldata.\n * Supports both EOAs and Smart Wallets.\n * Does not support transaction batching or paymasters.\n */\nexport function useSendCall({\n  setLifecycleStatus,\n  transactionHashList,\n}: UseSendCallParams) {\n  const {\n    status,\n    sendTransactionAsync: sendCallAsync,\n    data,\n  } = useSendCallWagmi({\n    mutation: {\n      onError: (e) => {\n        const errorMessage = isUserRejectedRequestError(e)\n          ? 'Request denied.'\n          : GENERIC_ERROR_MESSAGE;\n        setLifecycleStatus({\n          statusName: 'error',\n          statusData: {\n            code: 'TmUSCh01', // Transaction module UseSendCall hook 01 error\n            error: e.message,\n            message: errorMessage,\n          },\n        });\n      },\n      onSuccess: (hash: Address) => {\n        setLifecycleStatus({\n          statusName: 'transactionLegacyExecuted',\n          statusData: {\n            transactionHashList: [...transactionHashList, hash],\n          },\n        });\n      },\n    },\n  });\n  return { status, sendCallAsync, data };\n}\n","import type { TransactionExecutionError } from 'viem';\n\nexport function isUserRejectedRequestError(err: unknown) {\n  if (\n    (err as TransactionExecutionError)?.cause?.name ===\n    'UserRejectedRequestError'\n  ) {\n    return true;\n  }\n  if (\n    (err as TransactionExecutionError)?.shortMessage?.includes(\n      'User rejected the request.',\n    )\n  ) {\n    return true;\n  }\n  return false;\n}\n","import { useSendCalls as useSendCallsWagmi } from 'wagmi/experimental';\nimport { GENERIC_ERROR_MESSAGE } from '../constants';\nimport type { UseSendCallsParams } from '../types';\nimport { isUserRejectedRequestError } from '../utils/isUserRejectedRequestError';\n\n/**\n * useSendCalls: Experimental Wagmi hook for batching transactions with calldata.\n * Supports Smart Wallets.\n * Supports batch operations and capabilities such as paymasters.\n * Does not support EOAs.\n */\nexport function useSendCalls({\n  setLifecycleStatus,\n  setTransactionId,\n}: UseSendCallsParams) {\n  const { status, sendCallsAsync, data } = useSendCallsWagmi({\n    mutation: {\n      onError: (e) => {\n        const errorMessage = isUserRejectedRequestError(e)\n          ? 'Request denied.'\n          : GENERIC_ERROR_MESSAGE;\n        setLifecycleStatus({\n          statusName: 'error',\n          statusData: {\n            code: 'TmUSCSh01', // Transaction module UseSendCalls hook 01 error\n            error: e.message,\n            message: errorMessage,\n          },\n        });\n      },\n      onSuccess: (id) => {\n        setTransactionId(id);\n      },\n    },\n  });\n  return { status, sendCallsAsync, data };\n}\n","import { useCallback } from 'react';\nimport type { ContractFunctionParameters } from 'viem';\nimport { Capabilities } from '../../constants';\nimport type { Call, UseSendWalletTransactionsParams } from '../types';\nimport { sendBatchedTransactions } from '../utils/sendBatchedTransactions';\nimport { sendSingleTransactions } from '../utils/sendSingleTransactions';\n\n// Sends transactions to the wallet using the appropriate hook based on Transaction props and wallet capabilities\nexport const useSendWalletTransactions = ({\n  capabilities,\n  sendCallAsync,\n  sendCallsAsync,\n  transactionType,\n  walletCapabilities,\n  writeContractAsync,\n  writeContractsAsync,\n}: UseSendWalletTransactionsParams) => {\n  return useCallback(\n    async (\n      transactions?:\n        | Call[]\n        | ContractFunctionParameters[]\n        | Promise<Call[]>\n        | Promise<ContractFunctionParameters[]>,\n    ) => {\n      if (!transactions) {\n        return;\n      }\n\n      const resolvedTransactions = await Promise.resolve(transactions);\n\n      if (walletCapabilities[Capabilities.AtomicBatch]?.supported) {\n        // Batched transactions\n        await sendBatchedTransactions({\n          capabilities,\n          sendCallsAsync,\n          transactions: resolvedTransactions,\n          transactionType,\n          writeContractsAsync,\n        });\n      } else {\n        // Non-batched transactions\n        await sendSingleTransactions({\n          sendCallAsync,\n          transactions: resolvedTransactions,\n          transactionType,\n          writeContractAsync,\n        });\n      }\n    },\n    [\n      writeContractsAsync,\n      writeContractAsync,\n      sendCallsAsync,\n      sendCallAsync,\n      capabilities,\n      transactionType,\n      walletCapabilities,\n    ],\n  );\n};\n","import {\n  TRANSACTION_TYPE_CALLS,\n  TRANSACTION_TYPE_CONTRACTS,\n} from '../constants';\nimport type { SendBatchedTransactionsParams } from '../types';\n\nexport const sendBatchedTransactions = async ({\n  capabilities,\n  sendCallsAsync,\n  transactions,\n  transactionType,\n  writeContractsAsync,\n}: SendBatchedTransactionsParams) => {\n  if (!transactions) {\n    return;\n  }\n  if (transactionType === TRANSACTION_TYPE_CONTRACTS) {\n    await writeContractsAsync({\n      contracts: transactions,\n      capabilities,\n    });\n  }\n  if (transactionType === TRANSACTION_TYPE_CALLS) {\n    await sendCallsAsync({\n      calls: transactions,\n      capabilities,\n    });\n  }\n};\n","import type { ContractFunctionParameters } from 'viem';\nimport { TRANSACTION_TYPE_CALLS } from '../constants';\nimport type { Call, SendSingleTransactionParams } from '../types';\n\nexport const sendSingleTransactions = async ({\n  sendCallAsync,\n  transactions,\n  transactionType,\n  writeContractAsync,\n}: SendSingleTransactionParams) => {\n  for (const transaction of transactions) {\n    if (transactionType === TRANSACTION_TYPE_CALLS) {\n      await sendCallAsync(transaction as Call);\n    } else {\n      await writeContractAsync(transaction as ContractFunctionParameters);\n    }\n  }\n};\n","import type { Address } from 'viem';\nimport { useWriteContract as useWriteContractWagmi } from 'wagmi';\nimport { GENERIC_ERROR_MESSAGE } from '../constants';\nimport type { UseWriteContractParams } from '../types';\nimport { isUserRejectedRequestError } from '../utils/isUserRejectedRequestError';\n\n/**\n * Wagmi hook for single contract transactions.\n * Supports both EOAs and Smart Wallets.\n * Does not support transaction batching or paymasters.\n */\nexport function useWriteContract({\n  setLifecycleStatus,\n  transactionHashList,\n}: UseWriteContractParams) {\n  const { status, writeContractAsync, data } = useWriteContractWagmi({\n    mutation: {\n      onError: (e) => {\n        const errorMessage = isUserRejectedRequestError(e)\n          ? 'Request denied.'\n          : GENERIC_ERROR_MESSAGE;\n        setLifecycleStatus({\n          statusName: 'error',\n          statusData: {\n            code: 'TmUWCh01', // Transaction module UseWriteContract hook 01 error\n            error: e.message,\n            message: errorMessage,\n          },\n        });\n      },\n      onSuccess: (hash: Address) => {\n        setLifecycleStatus({\n          statusName: 'transactionLegacyExecuted',\n          statusData: {\n            transactionHashList: [...transactionHashList, hash],\n          },\n        });\n      },\n    },\n  });\n  return { status, writeContractAsync, data };\n}\n","import { useWriteContracts as useWriteContractsWagmi } from 'wagmi/experimental';\nimport {\n  GENERIC_ERROR_MESSAGE,\n  METHOD_NOT_SUPPORTED_ERROR_SUBSTRING,\n} from '../constants';\nimport type { UseWriteContractsParams } from '../types';\nimport { isUserRejectedRequestError } from '../utils/isUserRejectedRequestError';\n\n/**\n * useWriteContracts: Experimental Wagmi hook for batching transactions.\n * Supports Smart Wallets.\n * Supports batch operations and capabilities such as paymasters.\n * Does not support EOAs.\n */\nexport function useWriteContracts({\n  setLifecycleStatus,\n  setTransactionId,\n}: UseWriteContractsParams) {\n  const { status, writeContractsAsync } = useWriteContractsWagmi({\n    mutation: {\n      onError: (e) => {\n        // Ignore EOA-specific error to fallback to writeContract\n        if (e.message.includes(METHOD_NOT_SUPPORTED_ERROR_SUBSTRING)) {\n          return;\n        }\n        const errorMessage = isUserRejectedRequestError(e)\n          ? 'Request denied.'\n          : GENERIC_ERROR_MESSAGE;\n        setLifecycleStatus({\n          statusName: 'error',\n          statusData: {\n            code: 'TmUWCSh01', // Transaction module UseWriteContracts hook 01 error\n            error: e.message,\n            message: errorMessage,\n          },\n        });\n      },\n      onSuccess: (id) => {\n        setTransactionId(id);\n      },\n    },\n  });\n  return { status, writeContractsAsync };\n}\n","import type { WalletCapabilities } from 'viem';\n\nexport const getPaymasterUrl = (\n  capabilities?: WalletCapabilities,\n): string | null => {\n  return capabilities?.paymasterService?.url || null;\n};\n","import { cn } from '../../styles/theme';\nimport { useIsMounted } from '../../useIsMounted';\nimport { useOnchainKit } from '../../useOnchainKit';\nimport { useTheme } from '../../useTheme';\nimport type { TransactionReact } from '../types';\nimport { TransactionProvider } from './TransactionProvider';\n\nexport function Transaction({\n  calls,\n  capabilities,\n  chainId,\n  className,\n  children,\n  contracts,\n  isSponsored,\n  onError,\n  onStatus,\n  onSuccess,\n}: TransactionReact) {\n  const isMounted = useIsMounted();\n  const componentTheme = useTheme();\n  const { chain } = useOnchainKit();\n\n  // prevents SSR hydration issue\n  if (!isMounted) {\n    return null;\n  }\n\n  // If chainId is not provided,\n  // use the default chainId from the OnchainKit context\n  const accountChainId = chainId ? chainId : chain.id;\n\n  return (\n    <TransactionProvider\n      calls={calls}\n      capabilities={capabilities}\n      chainId={accountChainId}\n      contracts={contracts}\n      isSponsored={isSponsored}\n      onError={onError}\n      onStatus={onStatus}\n      onSuccess={onSuccess}\n    >\n      <div\n        className={cn(componentTheme, 'flex w-full flex-col gap-2', className)}\n      >\n        {children}\n      </div>\n    </TransactionProvider>\n  );\n}\n","import { useCallback, useMemo } from 'react';\nimport { useAccount, useChainId } from 'wagmi';\nimport { useShowCallsStatus } from 'wagmi/experimental';\nimport { Spinner } from '../../internal/components/Spinner';\nimport { getChainExplorer } from '../../network/getChainExplorer';\nimport { border, cn, color, pressable, text } from '../../styles/theme';\nimport type { TransactionButtonReact } from '../types';\nimport { isSpinnerDisplayed } from '../utils/isSpinnerDisplayed';\nimport { useTransactionContext } from './TransactionProvider';\n\nexport function TransactionButton({\n  className,\n  disabled = false,\n  text: idleText = 'Transact',\n  errorOverride,\n  successOverride,\n  pendingOverride,\n}: TransactionButtonReact) {\n  const {\n    chainId,\n    errorMessage,\n    isLoading,\n    lifecycleStatus,\n    onSubmit,\n    receipt,\n    transactions,\n    transactionCount,\n    transactionHash,\n    transactionId,\n  } = useTransactionContext();\n\n  const { address } = useAccount();\n\n  const accountChainId = chainId ?? useChainId();\n  const { showCallsStatus } = useShowCallsStatus();\n\n  const isLegacyTransactionInProgress =\n    lifecycleStatus.statusName === 'transactionLegacyExecuted' &&\n    transactionCount !==\n      lifecycleStatus?.statusData?.transactionHashList?.length;\n\n  const isInProgress =\n    lifecycleStatus.statusName === 'buildingTransaction' ||\n    lifecycleStatus.statusName === 'transactionPending' ||\n    isLegacyTransactionInProgress ||\n    isLoading;\n\n  const isMissingProps = !transactions || !address;\n  const isWaitingForReceipt = !!transactionId || !!transactionHash;\n\n  const isDisabled =\n    !receipt &&\n    (isInProgress || isMissingProps || isWaitingForReceipt || disabled);\n\n  const displayPendingState = isSpinnerDisplayed({\n    errorMessage,\n    hasReceipt: !!receipt,\n    isInProgress,\n    transactionHash,\n    transactionId,\n  });\n\n  const { errorText, successText, pendingContent } = useMemo(() => {\n    const successText = successOverride?.text ?? 'View transaction';\n    const errorText = errorOverride?.text ?? 'Try again';\n    const pendingContent = pendingOverride?.text ?? <Spinner />;\n\n    return { successText, errorText, pendingContent };\n  }, [errorOverride, pendingOverride, successOverride]);\n\n  const successHandler = useCallback(() => {\n    if (successOverride?.onClick && receipt) {\n      return successOverride?.onClick?.(receipt);\n    }\n    // SW will have txn id so open in wallet\n    if (receipt && transactionId) {\n      return showCallsStatus({ id: transactionId });\n    }\n    // EOA will not have txn id so open in explorer\n    const chainExplorer = getChainExplorer(accountChainId);\n    return window.open(\n      `${chainExplorer}/tx/${transactionHash}`,\n      '_blank',\n      'noopener,noreferrer',\n    );\n  }, [\n    accountChainId,\n    successOverride,\n    showCallsStatus,\n    transactionId,\n    transactionHash,\n    receipt,\n  ]);\n\n  const errorHandler = useCallback(() => {\n    if (errorOverride?.onClick) {\n      return errorOverride?.onClick?.();\n    }\n    // if no custom logic, retry submit\n    return onSubmit();\n  }, [errorOverride, onSubmit]);\n\n  const buttonContent = useMemo(() => {\n    // txn successful\n    if (receipt) {\n      return successText;\n    }\n    if (errorMessage) {\n      return errorText;\n    }\n    if (displayPendingState) {\n      return pendingContent;\n    }\n    return idleText;\n  }, [\n    displayPendingState,\n    errorMessage,\n    errorText,\n    idleText,\n    pendingContent,\n    receipt,\n    successText,\n  ]);\n\n  const handleSubmit = useCallback(() => {\n    if (receipt) {\n      successHandler();\n    } else if (errorMessage) {\n      errorHandler();\n    } else {\n      onSubmit();\n    }\n  }, [errorMessage, errorHandler, onSubmit, receipt, successHandler]);\n\n  return (\n    <button\n      className={cn(\n        pressable.primary,\n        border.radius,\n        'w-full rounded-xl',\n        'px-4 py-3 font-medium text-base text-white leading-6',\n        isDisabled && pressable.disabled,\n        text.headline,\n        className,\n      )}\n      onClick={handleSubmit}\n      type=\"button\"\n      disabled={isDisabled}\n      data-testid=\"ockTransactionButton_Button\"\n    >\n      <div className={cn(text.headline, color.inverse, 'flex justify-center')}>\n        {buttonContent}\n      </div>\n    </button>\n  );\n}\n","import { cn } from '../../styles/theme';\n\ntype SpinnerReact = {\n  className?: string;\n};\n\nexport function Spinner({ className }: SpinnerReact) {\n  return (\n    <div\n      className=\"flex h-full items-center justify-center\"\n      data-testid=\"ockSpinner\"\n    >\n      <div\n        className={cn(\n          'animate-spin border-2 border-gray-200 border-t-3',\n          'rounded-full border-t-gray-400 px-2.5 py-2.5',\n          className,\n        )}\n      />\n    </div>\n  );\n}\n","import { baseSepolia } from 'viem/chains';\n\nexport function getChainExplorer(chainId?: number) {\n  if (chainId === baseSepolia.id) {\n    return 'https://sepolia.basescan.org';\n  }\n  return 'https://basescan.org';\n}\n","import type { IsSpinnerDisplayedProps } from '../types';\n\nexport function isSpinnerDisplayed({\n  errorMessage,\n  hasReceipt,\n  isInProgress,\n  transactionHash,\n  transactionId,\n}: IsSpinnerDisplayedProps) {\n  const isWaitingForReceipt = transactionId || transactionHash;\n\n  if (hasReceipt || errorMessage) {\n    return false;\n  }\n  if (isInProgress || isWaitingForReceipt) {\n    return true;\n  }\n  return false;\n}\n","import { useCallback, useEffect, useMemo } from 'react';\nimport { closeSvg } from '../../internal/svg/closeSvg';\nimport { background, cn } from '../../styles/theme';\nimport type { TransactionToastReact } from '../types';\nimport { useTransactionContext } from './TransactionProvider';\n\nexport function TransactionToast({\n  children,\n  className,\n  durationMs = 3000,\n  position = 'bottom-center',\n}: TransactionToastReact) {\n  const {\n    errorMessage,\n    isLoading,\n    isToastVisible,\n    receipt,\n    setIsToastVisible,\n    transactionHash,\n    transactionId,\n  } = useTransactionContext();\n\n  const closeToast = useCallback(() => {\n    setIsToastVisible(false);\n  }, [setIsToastVisible]);\n\n  const positionClass = useMemo(() => {\n    if (position === 'bottom-right') {\n      return 'bottom-5 left-3/4';\n    }\n    if (position === 'top-right') {\n      return 'top-[100px] left-3/4';\n    }\n    if (position === 'top-center') {\n      return 'top-[100px] left-2/4';\n    }\n    return 'bottom-5 left-2/4';\n  }, [position]);\n\n  useEffect(() => {\n    let timer: ReturnType<typeof setTimeout> | undefined;\n    // hide toast after 5 seconds once\n    // it reaches final state (success or error)\n    if (receipt || errorMessage) {\n      timer = setTimeout(() => {\n        setIsToastVisible(false);\n      }, durationMs);\n    }\n    return () => {\n      if (timer) {\n        clearTimeout(timer);\n      }\n    };\n  }, [errorMessage, durationMs, receipt, setIsToastVisible]);\n\n  const isInProgress =\n    !receipt &&\n    !isLoading &&\n    !transactionHash &&\n    !errorMessage &&\n    !transactionId;\n\n  if (!isToastVisible || isInProgress) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cn(\n        background.default,\n        'flex animate-enter items-center justify-between rounded-lg',\n        'p-2 shadow-[0px_8px_24px_0px_rgba(0,0,0,0.12)]',\n        '-translate-x-2/4 fixed z-20',\n        positionClass,\n        className,\n      )}\n    >\n      <div className=\"flex items-center gap-4 p-2\">{children}</div>\n      <button\n        className=\"p-2\"\n        onClick={closeToast}\n        type=\"button\"\n        data-testid=\"ockCloseButton\"\n      >\n        {closeSvg}\n      </button>\n    </div>\n  );\n}\n","import { icon } from '../../styles/theme';\n\nexport const closeSvg = (\n  <svg\n    aria-label=\"ock-closeSvg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 16 16\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <title>Close SVG</title>\n    <path\n      d=\"M2.14921 1L1 2.1492L6.8508 8L1 13.8508L2.1492 15L8 9.1492L13.8508 15L15 13.8508L9.14921 8L15 2.1492L13.8508 1L8 6.8508L2.14921 1Z\"\n      className={icon.foreground}\n    />\n  </svg>\n);\n","import { useMemo } from 'react';\nimport type { ReactNode } from 'react';\nimport { useChainId } from 'wagmi';\nimport { useShowCallsStatus } from 'wagmi/experimental';\nimport { getChainExplorer } from '../../network/getChainExplorer';\nimport { cn, color, text } from '../../styles/theme';\nimport { useTransactionContext } from '../components/TransactionProvider';\n\nexport function useGetTransactionToastAction() {\n  const { chainId, errorMessage, onSubmit, transactionHash, transactionId } =\n    useTransactionContext();\n  const accountChainId = chainId ?? useChainId();\n\n  const { showCallsStatus } = useShowCallsStatus();\n\n  return useMemo(() => {\n    const chainExplorer = getChainExplorer(accountChainId);\n\n    let actionElement: ReactNode = null;\n\n    // EOA will have txn hash\n    if (transactionHash) {\n      actionElement = (\n        <a\n          href={`${chainExplorer}/tx/${transactionHash}`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          <span className={cn(text.label1, color.primary)}>\n            View transaction\n          </span>\n        </a>\n      );\n    }\n\n    // SW will have txn id\n    if (transactionId) {\n      actionElement = (\n        <button\n          onClick={() => showCallsStatus({ id: transactionId })}\n          type=\"button\"\n        >\n          <span className={cn(text.label1, color.primary)}>\n            View transaction\n          </span>\n        </button>\n      );\n    }\n\n    if (errorMessage) {\n      actionElement = (\n        <button type=\"button\" onClick={onSubmit}>\n          <span className={cn(text.label1, color.primary)}>Try again</span>\n        </button>\n      );\n    }\n\n    return { actionElement };\n  }, [\n    accountChainId,\n    errorMessage,\n    onSubmit,\n    showCallsStatus,\n    transactionHash,\n    transactionId,\n  ]);\n}\n","import { cn, text } from '../../styles/theme';\nimport { useGetTransactionToastAction } from '../hooks/useGetTransactionToastAction';\nimport type { TransactionToastActionReact } from '../types';\n\nexport function TransactionToastAction({\n  className,\n}: TransactionToastActionReact) {\n  const { actionElement } = useGetTransactionToastAction();\n\n  return (\n    <div className={cn(text.label1, 'text-nowrap', className)}>\n      {actionElement}\n    </div>\n  );\n}\n","import { useMemo } from 'react';\nimport { Spinner } from '../../internal/components/Spinner';\nimport { errorSvg } from '../../internal/svg/errorSvg';\nimport { successSvg } from '../../internal/svg/successSvg';\nimport { cn, text } from '../../styles/theme';\nimport type { TransactionToastIconReact } from '../types';\nimport { useTransactionContext } from './TransactionProvider';\n\nexport function TransactionToastIcon({ className }: TransactionToastIconReact) {\n  const { errorMessage, isLoading, receipt, transactionHash, transactionId } =\n    useTransactionContext();\n  const isInProgress = isLoading || !!transactionId || !!transactionHash;\n\n  const icon = useMemo(() => {\n    // txn successful\n    if (receipt) {\n      return successSvg;\n    }\n    if (errorMessage) {\n      return errorSvg;\n    }\n    if (isInProgress) {\n      return <Spinner className=\"px-1.5 py-1.5\" />;\n    }\n    return null;\n  }, [isInProgress, errorMessage, receipt]);\n\n  if (!icon) {\n    return null;\n  }\n\n  return <div className={cn(text.label2, className)}>{icon}</div>;\n}\n","export const errorSvg = (\n  <svg\n    aria-label=\"ock-errorSvg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 16 16\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    data-testid=\"ock-errorSvg\"\n  >\n    <title>Error SVG</title>\n    <path\n      d=\"M8 16C12.4183 16 16 12.4183 16 8C16 3.58171 12.4183 0 8 0C3.58172 0 0 3.58171 0 8C0 12.4183 3.58172 16 8 16ZM11.7576 5.0909L8.84853 8L11.7576 10.9091L10.9091 11.7576L8 8.84851L5.09093 11.7576L4.2424 10.9091L7.15147 8L4.2424 5.0909L5.09093 4.24239L8 7.15145L10.9091 4.24239L11.7576 5.0909Z\"\n      fill=\"#E11D48\"\n    />\n  </svg>\n);\n","export const successSvg = (\n  <svg\n    aria-label=\"ock-successSvg\"\n    width=\"16\"\n    height=\"16\"\n    viewBox=\"0 0 16 16\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    data-testid=\"ock-successSvg\"\n  >\n    <title>Success SVG</title>\n    <path\n      d=\"M8 0C3.58 0 0 3.58 0 8C0 12.42 3.58 16 8 16C12.42 16 16 12.42 16 8C16 3.58 12.42 0 8 0ZM6.72667 11.5333L3.73333 8.54L4.67333 7.6L6.72667 9.65333L11.44 4.94L12.38 5.88L6.72667 11.5333Z\"\n      fill=\"#65A30D\"\n    />\n  </svg>\n);\n","import { useMemo } from 'react';\nimport { color } from '../../styles/theme';\nimport { useTransactionContext } from '../components/TransactionProvider';\n\nexport function useGetTransactionToastLabel() {\n  const {\n    errorMessage,\n    isLoading,\n    lifecycleStatus,\n    receipt,\n    transactionHash,\n    transactionId,\n  } = useTransactionContext();\n\n  // user confirmed in wallet, txn in progress\n  const isInProgress = isLoading || !!transactionId || !!transactionHash;\n\n  // waiting for calls or contracts promise to resolve\n  const isBuildingTransaction =\n    lifecycleStatus.statusName === 'buildingTransaction';\n\n  return useMemo(() => {\n    let label = '';\n    let labelClassName: string = color.foregroundMuted;\n\n    if (isBuildingTransaction) {\n      label = 'Building transaction';\n    }\n\n    if (isInProgress) {\n      label = 'Transaction in progress';\n    }\n\n    if (receipt) {\n      label = 'Successful';\n    }\n\n    if (errorMessage) {\n      label = 'Something went wrong';\n      labelClassName = color.error;\n    }\n\n    return { label, labelClassName };\n  }, [errorMessage, isBuildingTransaction, isInProgress, receipt]);\n}\n","import { cn, color, text } from '../../styles/theme';\nimport { useGetTransactionToastLabel } from '../hooks/useGetTransactionToastLabel';\nimport type { TransactionToastLabelReact } from '../types';\n\nexport function TransactionToastLabel({\n  className,\n}: TransactionToastLabelReact) {\n  const { label } = useGetTransactionToastLabel();\n  return (\n    <div className={cn(text.label1, 'text-nowrap', className)}>\n      <p className={color.foreground}>{label}</p>\n    </div>\n  );\n}\n","import type { TransactionDefaultReact } from '../types';\nimport { Transaction } from './Transaction';\nimport { TransactionButton } from './TransactionButton';\nimport { TransactionToast } from './TransactionToast';\nimport { TransactionToastAction } from './TransactionToastAction';\nimport { TransactionToastIcon } from './TransactionToastIcon';\nimport { TransactionToastLabel } from './TransactionToastLabel';\n\nexport function TransactionDefault({\n  calls,\n  capabilities,\n  chainId,\n  className,\n  contracts,\n  disabled,\n  onError,\n  onStatus,\n  onSuccess,\n}: TransactionDefaultReact) {\n  return (\n    <Transaction\n      calls={calls}\n      capabilities={capabilities}\n      chainId={chainId}\n      className={className}\n      contracts={contracts}\n      onError={onError}\n      onStatus={onStatus}\n      onSuccess={onSuccess}\n    >\n      <TransactionButton disabled={disabled} />\n      <TransactionToast>\n        <TransactionToastIcon />\n        <TransactionToastLabel />\n        <TransactionToastAction />\n      </TransactionToast>\n    </Transaction>\n  );\n}\n","import { cn, color, text } from '../../styles/theme';\nimport type { TransactionSponsorReact } from '../types';\nimport { useTransactionContext } from './TransactionProvider';\n\nexport function TransactionSponsor({ className }: TransactionSponsorReact) {\n  const {\n    errorMessage,\n    lifecycleStatus,\n    paymasterUrl,\n    receipt,\n    transactionHash,\n    transactionId,\n  } = useTransactionContext();\n\n  const transactionInProgress = transactionId || transactionHash;\n  if (\n    lifecycleStatus.statusName !== 'init' ||\n    !paymasterUrl ||\n    errorMessage ||\n    transactionInProgress ||\n    receipt\n  ) {\n    return null;\n  }\n\n  return (\n    <div className={cn(text.label2, 'flex', className)}>\n      <p className={color.foregroundMuted}>Zero transaction fee</p>\n    </div>\n  );\n}\n","import { cn } from '../../styles/theme';\nimport type { TransactionStatusReact } from '../types';\n\nexport function TransactionStatus({\n  children,\n  className,\n}: TransactionStatusReact) {\n  return (\n    <div className={cn('flex justify-between', className)}>{children}</div>\n  );\n}\n","import { useMemo } from 'react';\nimport type { ReactNode } from 'react';\nimport { useChainId } from 'wagmi';\nimport { useShowCallsStatus } from 'wagmi/experimental';\nimport { getChainExplorer } from '../../network/getChainExplorer';\nimport { cn, color, text } from '../../styles/theme';\nimport { useTransactionContext } from '../components/TransactionProvider';\n\nexport function useGetTransactionStatusAction() {\n  const { chainId, receipt, transactionHash, transactionId } =\n    useTransactionContext();\n  const accountChainId = chainId ?? useChainId();\n\n  const { showCallsStatus } = useShowCallsStatus();\n\n  return useMemo(() => {\n    const chainExplorer = getChainExplorer(accountChainId);\n\n    let actionElement: ReactNode = null;\n\n    // EOA will have txn hash\n    if (transactionHash) {\n      actionElement = (\n        <a\n          href={`${chainExplorer}/tx/${transactionHash}`}\n          target=\"_blank\"\n          rel=\"noreferrer\"\n        >\n          <span className={cn(text.label1, color.primary)}>\n            View transaction\n          </span>\n        </a>\n      );\n    }\n\n    // SW will have txn id\n    if (transactionId) {\n      actionElement = (\n        <button\n          onClick={() => showCallsStatus({ id: transactionId })}\n          type=\"button\"\n        >\n          <span className={cn(text.label1, color.primary)}>\n            View transaction\n          </span>\n        </button>\n      );\n    }\n\n    if (receipt) {\n      actionElement = null;\n    }\n\n    return { actionElement };\n  }, [\n    accountChainId,\n    receipt,\n    showCallsStatus,\n    transactionHash,\n    transactionId,\n  ]);\n}\n","import { cn, text } from '../../styles/theme';\nimport { useGetTransactionStatusAction } from '../hooks/useGetTransactionStatusAction';\nimport type { TransactionStatusActionReact } from '../types';\n\nexport function TransactionStatusAction({\n  className,\n}: TransactionStatusActionReact) {\n  const { actionElement } = useGetTransactionStatusAction();\n\n  return (\n    <div className={cn(text.label2, 'min-w-[70px]', className)}>\n      {actionElement}\n    </div>\n  );\n}\n","import { useMemo } from 'react';\nimport { color } from '../../styles/theme';\nimport { useTransactionContext } from '../components/TransactionProvider';\n\nexport function useGetTransactionStatusLabel() {\n  const {\n    errorMessage,\n    isLoading,\n    receipt,\n    lifecycleStatus,\n    transactionHash,\n    transactionId,\n  } = useTransactionContext();\n  // user confirmed in wallet, txn in progress\n  const isInProgress = isLoading || !!transactionId || !!transactionHash;\n\n  // user started txn and needs to confirm in wallet\n  const isPending = lifecycleStatus.statusName === 'transactionPending';\n\n  // waiting for calls or contracts promise to resolve\n  const isBuildingTransaction =\n    lifecycleStatus.statusName === 'buildingTransaction';\n\n  return useMemo(() => {\n    let label = '';\n    let labelClassName: string = color.foregroundMuted;\n\n    if (isBuildingTransaction) {\n      label = 'Building transaction...';\n    }\n\n    if (isPending) {\n      label = 'Confirm in wallet.';\n    }\n\n    if (isInProgress) {\n      label = 'Transaction in progress...';\n    }\n\n    if (receipt) {\n      label = 'Successful';\n    }\n\n    if (errorMessage) {\n      label = errorMessage;\n      labelClassName = color.error;\n    }\n\n    return { label, labelClassName };\n  }, [errorMessage, isBuildingTransaction, isInProgress, isPending, receipt]);\n}\n","import { cn, text } from '../../styles/theme';\nimport { useGetTransactionStatusLabel } from '../hooks/useGetTransactionStatusLabel';\nimport type { TransactionStatusLabelReact } from '../types';\n\nexport function TransactionStatusLabel({\n  className,\n}: TransactionStatusLabelReact) {\n  const { label, labelClassName } = useGetTransactionStatusLabel();\n\n  return (\n    <div className={cn(text.label2, className)}>\n      <p className={labelClassName}>{label}</p>\n    </div>\n  );\n}\n"],"mappings":"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","names":["clsx","twMerge","cn","inputs","twMerge","clsx","text","body","caption","headline","label1","label2","legal","title1","title3","pressable","default","alternate","inverse","primary","secondary","coinbaseBranding","shadow","disabled","background","error","warning","success","washed","reverse","color","foreground","foregroundMuted","border","default","defaultActive","radius","radiusInner","icon","primary","foreground","foregroundMuted","inverse","error","success","warning","useEffect","useState","useIsMounted","isMounted","setIsMounted","useState","useEffect","useContext","createContext","useMemo","baseSepolia","ONCHAIN_KIT_CONFIG","address","apiKey","chain","baseSepolia","config","appearance","name","logo","mode","theme","paymaster","rpcUrl","schemaId","projectId","OnchainKitContext","createContext","ONCHAIN_KIT_CONFIG","useOnchainKit","useContext","OnchainKitContext","useEffect","useState","usePreferredColorScheme","colorScheme","setColorScheme","useState","useEffect","mediaQuery","window","matchMedia","matches","updateColorScheme","event","addEventListener","removeEventListener","useTheme","preferredMode","usePreferredColorScheme","config","appearance","useOnchainKit","theme","mode","createContext","useCallback","useContext","useEffect","useMemo","useState","useAccount","useConfig","useSwitchChain","useWaitForTransactionReceipt","waitForTransactionReceipt","Capabilities","useMemo","useAccount","useCapabilities","useCapabilitiesSafe","chainId","isConnected","useAccount","data","capabilities","error","useCapabilities","query","enabled","useMemo","useMemo","useValue","object","useMemo","GENERIC_ERROR_MESSAGE","METHOD_NOT_SUPPORTED_ERROR_SUBSTRING","TRANSACTION_TYPE_CALLS","TRANSACTION_TYPE_CONTRACTS","useCallsStatus","useCallsStatusWagmi","useCallsStatus","setLifecycleStatus","transactionId","data","useCallsStatusWagmi","id","query","refetchInterval","state","status","enabled","transactionHash","receipts","err","statusName","statusData","code","error","JSON","stringify","message","undefined","useSendTransaction","useSendCallWagmi","isUserRejectedRequestError","err","cause","name","shortMessage","includes","useSendCall","setLifecycleStatus","transactionHashList","status","sendTransactionAsync","sendCallAsync","data","useSendCallWagmi","mutation","onError","e","errorMessage","isUserRejectedRequestError","GENERIC_ERROR_MESSAGE","statusName","statusData","code","error","message","onSuccess","hash","useSendCalls","useSendCallsWagmi","useSendCalls","setLifecycleStatus","setTransactionId","status","sendCallsAsync","data","useSendCallsWagmi","mutation","onError","e","errorMessage","isUserRejectedRequestError","GENERIC_ERROR_MESSAGE","statusName","statusData","code","error","message","onSuccess","id","useCallback","sendBatchedTransactions","capabilities","sendCallsAsync","transactions","transactionType","writeContractsAsync","TRANSACTION_TYPE_CONTRACTS","contracts","TRANSACTION_TYPE_CALLS","calls","sendSingleTransactions","sendCallAsync","transactions","transactionType","writeContractAsync","transaction","TRANSACTION_TYPE_CALLS","useSendWalletTransactions","capabilities","sendCallAsync","sendCallsAsync","transactionType","walletCapabilities","writeContractAsync","writeContractsAsync","useCallback","transactions","resolvedTransactions","Promise","resolve","Capabilities","AtomicBatch","supported","sendBatchedTransactions","sendSingleTransactions","useWriteContract","useWriteContractWagmi","useWriteContract","setLifecycleStatus","transactionHashList","status","writeContractAsync","data","useWriteContractWagmi","mutation","onError","e","errorMessage","isUserRejectedRequestError","GENERIC_ERROR_MESSAGE","statusName","statusData","code","error","message","onSuccess","hash","useWriteContracts","useWriteContractsWagmi","useWriteContracts","setLifecycleStatus","setTransactionId","status","writeContractsAsync","useWriteContractsWagmi","mutation","onError","e","message","includes","METHOD_NOT_SUPPORTED_ERROR_SUBSTRING","errorMessage","isUserRejectedRequestError","GENERIC_ERROR_MESSAGE","statusName","statusData","code","error","onSuccess","id","getPaymasterUrl","capabilities","paymasterService","url","emptyContext","TransactionContext","createContext","useTransactionContext","context","useContext","Error","TransactionProvider","calls","capabilities","transactionCapabilities","chainId","children","contracts","isSponsored","onError","onStatus","onSuccess","account","useAccount","config","useConfig","paymaster","undefined","useOnchainKit","errorMessage","setErrorMessage","useState","errorCode","setErrorCode","isToastVisible","setIsToastVisible","lifecycleStatus","setLifecycleStatus","statusName","statusData","transactionId","setTransactionId","transactionCount","setTransactionCount","transactionHashList","setTransactionHashList","transactions","transactionType","TRANSACTION_TYPE_CALLS","TRANSACTION_TYPE_CONTRACTS","walletCapabilities","useCapabilitiesSafe","switchChainAsync","useSwitchChain","status","statusWriteContracts","writeContractsAsync","useWriteContracts","statusWriteContract","writeContractAsync","data","writeContractTransactionHash","useWriteContract","statusSendCalls","sendCallsAsync","useSendCalls","statusSendCall","sendCallAsync","sendCallTransactionHash","useSendCall","transactionStatus","useMemo","transactionStatuses","Capabilities","AtomicBatch","supported","singleTransactionHash","paymasterService","url","sendWalletTransactions","useSendWalletTransactions","transactionHash","batchedTransactionHash","callStatus","useCallsStatus","receipt","useWaitForTransactionReceipt","hash","useEffect","message","code","transactionReceipts","length","getTransactionLegacyReceipts","useCallback","receipts","txnReceipt","waitForTransactionReceipt","push","err","error","JSON","stringify","GENERIC_ERROR_MESSAGE","switchChain","targetChainId","buildTransaction","resolvedTransactions","Promise","resolve","handleSubmit","isUserRejectedRequestError","value","useValue","isLoading","onSubmit","paymasterUrl","getPaymasterUrl","Provider","Transaction","calls","capabilities","chainId","className","children","contracts","isSponsored","onError","onStatus","onSuccess","isMounted","useIsMounted","componentTheme","useTheme","chain","useOnchainKit","accountChainId","id","TransactionProvider","div","cn","useCallback","useMemo","useAccount","useChainId","useShowCallsStatus","Spinner","className","div","data-testid","cn","baseSepolia","getChainExplorer","chainId","baseSepolia","id","isSpinnerDisplayed","errorMessage","hasReceipt","isInProgress","transactionHash","transactionId","isWaitingForReceipt","TransactionButton","className","disabled","text","idleText","errorOverride","successOverride","pendingOverride","chainId","errorMessage","isLoading","lifecycleStatus","onSubmit","receipt","transactions","transactionCount","transactionHash","transactionId","useTransactionContext","address","useAccount","accountChainId","useChainId","showCallsStatus","useShowCallsStatus","isLegacyTransactionInProgress","statusName","statusData","transactionHashList","length","isInProgress","isMissingProps","isWaitingForReceipt","isDisabled","displayPendingState","isSpinnerDisplayed","hasReceipt","errorText","successText","pendingContent","useMemo","Spinner","successHandler","useCallback","onClick","id","chainExplorer","getChainExplorer","window","open","errorHandler","buttonContent","handleSubmit","button","cn","pressable","primary","border","radius","headline","type","data-testid","div","color","inverse","useCallback","useEffect","useMemo","closeSvg","svg","aria-label","width","height","viewBox","fill","xmlns","title","path","d","className","icon","foreground","TransactionToast","children","className","durationMs","position","errorMessage","isLoading","isToastVisible","receipt","setIsToastVisible","transactionHash","transactionId","useTransactionContext","closeToast","useCallback","positionClass","useMemo","useEffect","timer","setTimeout","clearTimeout","isInProgress","div","cn","background","default","button","onClick","type","data-testid","closeSvg","useMemo","useChainId","useShowCallsStatus","useGetTransactionToastAction","chainId","errorMessage","onSubmit","transactionHash","transactionId","useTransactionContext","accountChainId","useChainId","showCallsStatus","useShowCallsStatus","useMemo","chainExplorer","getChainExplorer","actionElement","a","href","target","rel","span","className","cn","text","label1","color","primary","button","onClick","id","type","TransactionToastAction","className","actionElement","useGetTransactionToastAction","div","cn","text","label1","useMemo","errorSvg","svg","aria-label","width","height","viewBox","fill","xmlns","data-testid","title","path","d","successSvg","svg","aria-label","width","height","viewBox","fill","xmlns","data-testid","title","path","d","TransactionToastIcon","className","errorMessage","isLoading","receipt","transactionHash","transactionId","useTransactionContext","isInProgress","icon","useMemo","successSvg","errorSvg","Spinner","div","cn","text","label2","useMemo","useGetTransactionToastLabel","errorMessage","isLoading","lifecycleStatus","receipt","transactionHash","transactionId","useTransactionContext","isInProgress","isBuildingTransaction","statusName","useMemo","label","labelClassName","color","foregroundMuted","error","TransactionToastLabel","className","label","useGetTransactionToastLabel","div","cn","text","label1","p","color","foreground","TransactionDefault","calls","capabilities","chainId","className","contracts","disabled","onError","onStatus","onSuccess","Transaction","TransactionButton","TransactionToast","TransactionToastIcon","TransactionToastLabel","TransactionToastAction","TransactionSponsor","className","errorMessage","lifecycleStatus","paymasterUrl","receipt","transactionHash","transactionId","useTransactionContext","transactionInProgress","statusName","div","cn","text","label2","p","color","foregroundMuted","TransactionStatus","children","className","div","cn","useMemo","useChainId","useShowCallsStatus","useGetTransactionStatusAction","chainId","receipt","transactionHash","transactionId","useTransactionContext","accountChainId","useChainId","showCallsStatus","useShowCallsStatus","useMemo","chainExplorer","getChainExplorer","actionElement","a","href","target","rel","span","className","cn","text","label1","color","primary","button","onClick","id","type","TransactionStatusAction","className","actionElement","useGetTransactionStatusAction","div","cn","text","label2","useMemo","useGetTransactionStatusLabel","errorMessage","isLoading","receipt","lifecycleStatus","transactionHash","transactionId","useTransactionContext","isInProgress","isPending","statusName","isBuildingTransaction","useMemo","label","labelClassName","color","foregroundMuted","error","TransactionStatusLabel","className","label","labelClassName","useGetTransactionStatusLabel","div","cn","text","label2","p"]}